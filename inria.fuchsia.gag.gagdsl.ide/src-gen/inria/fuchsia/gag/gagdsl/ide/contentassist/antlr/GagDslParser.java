/*
 * generated by Xtext 2.14.0
 */
package inria.fuchsia.gag.gagdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import inria.fuchsia.gag.gagdsl.ide.contentassist.antlr.internal.InternalGagDslParser;
import inria.fuchsia.gag.gagdsl.services.GagDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GagDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GagDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GagDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_6(), "rule__Task__Group_6__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_7(), "rule__Task__Group_7__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_8(), "rule__Task__Group_8__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_8_3(), "rule__Task__Group_8_3__0");
			builder.put(grammarAccess.getGAGAccess().getGroup(), "rule__GAG__Group__0");
			builder.put(grammarAccess.getGAGAccess().getGroup_6(), "rule__GAG__Group_6__0");
			builder.put(grammarAccess.getELongAccess().getGroup(), "rule__ELong__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_4(), "rule__Service__Group_4__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_4_3(), "rule__Service__Group_4_3__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_5(), "rule__Service__Group_5__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_5_3(), "rule__Service__Group_5_3__0");
			builder.put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
			builder.put(grammarAccess.getValueAccess().getGroup_4(), "rule__Value__Group_4__0");
			builder.put(grammarAccess.getValueAccess().getGroup_5(), "rule__Value__Group_5__0");
			builder.put(grammarAccess.getValueAccess().getGroup_5_3(), "rule__Value__Group_5_3__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_5_3(), "rule__Rule__Group_5_3__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_6(), "rule__Rule__Group_6__0");
			builder.put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getNameAssignment_1(), "rule__Configuration__NameAssignment_1");
			builder.put(grammarAccess.getConfigurationAccess().getRootAssignment_4(), "rule__Configuration__RootAssignment_4");
			builder.put(grammarAccess.getConfigurationAccess().getConsistent_toAssignment_6(), "rule__Configuration__Consistent_toAssignment_6");
			builder.put(grammarAccess.getTaskAccess().getIs_openAssignment_0(), "rule__Task__Is_openAssignment_0");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_2(), "rule__Task__NameAssignment_2");
			builder.put(grammarAccess.getTaskAccess().getIdAssignment_5(), "rule__Task__IdAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getAppliedRuleAssignment_6_1(), "rule__Task__AppliedRuleAssignment_6_1");
			builder.put(grammarAccess.getTaskAccess().getInstance_ofAssignment_7_1(), "rule__Task__Instance_ofAssignment_7_1");
			builder.put(grammarAccess.getTaskAccess().getSub_taskAssignment_8_2(), "rule__Task__Sub_taskAssignment_8_2");
			builder.put(grammarAccess.getTaskAccess().getSub_taskAssignment_8_3_1(), "rule__Task__Sub_taskAssignment_8_3_1");
			builder.put(grammarAccess.getGAGAccess().getNameAssignment_1(), "rule__GAG__NameAssignment_1");
			builder.put(grammarAccess.getGAGAccess().getRuleAssignment_5(), "rule__GAG__RuleAssignment_5");
			builder.put(grammarAccess.getGAGAccess().getRuleAssignment_6_1(), "rule__GAG__RuleAssignment_6_1");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_2(), "rule__Service__NameAssignment_2");
			builder.put(grammarAccess.getServiceAccess().getInputAssignment_4_2(), "rule__Service__InputAssignment_4_2");
			builder.put(grammarAccess.getServiceAccess().getInputAssignment_4_3_1(), "rule__Service__InputAssignment_4_3_1");
			builder.put(grammarAccess.getServiceAccess().getOutputAssignment_5_2(), "rule__Service__OutputAssignment_5_2");
			builder.put(grammarAccess.getServiceAccess().getOutputAssignment_5_3_1(), "rule__Service__OutputAssignment_5_3_1");
			builder.put(grammarAccess.getValueAccess().getDefinedAssignment_0(), "rule__Value__DefinedAssignment_0");
			builder.put(grammarAccess.getValueAccess().getNameAssignment_2(), "rule__Value__NameAssignment_2");
			builder.put(grammarAccess.getValueAccess().getValueAssignment_4_1(), "rule__Value__ValueAssignment_4_1");
			builder.put(grammarAccess.getValueAccess().getSub_valueAssignment_5_2(), "rule__Value__Sub_valueAssignment_5_2");
			builder.put(grammarAccess.getValueAccess().getSub_valueAssignment_5_3_1(), "rule__Value__Sub_valueAssignment_5_3_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getLeft_hand_sideAssignment_4(), "rule__Rule__Left_hand_sideAssignment_4");
			builder.put(grammarAccess.getRuleAccess().getRight_hand_side_serviceAssignment_5_2(), "rule__Rule__Right_hand_side_serviceAssignment_5_2");
			builder.put(grammarAccess.getRuleAccess().getRight_hand_side_serviceAssignment_5_3_1(), "rule__Rule__Right_hand_side_serviceAssignment_5_3_1");
			builder.put(grammarAccess.getRuleAccess().getGuardAssignment_6_1(), "rule__Rule__GuardAssignment_6_1");
			builder.put(grammarAccess.getGuardAccess().getClassPathAssignment_3(), "rule__Guard__ClassPathAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GagDslGrammarAccess grammarAccess;

	@Override
	protected InternalGagDslParser createParser() {
		InternalGagDslParser result = new InternalGagDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GagDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GagDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
