/*
 * generated by Xtext 2.14.0
 */
package inria.fuchsia.gag.xtext.serializer;

import com.google.inject.Inject;
import inria.fuchsia.gag.gag.process.Configuration;
import inria.fuchsia.gag.gag.process.ProcessPackage;
import inria.fuchsia.gag.gag.process.Task;
import inria.fuchsia.gag.gag.specification.Attribute;
import inria.fuchsia.gag.gag.specification.GAG;
import inria.fuchsia.gag.gag.specification.Guard;
import inria.fuchsia.gag.gag.specification.Rule;
import inria.fuchsia.gag.gag.specification.Service;
import inria.fuchsia.gag.gag.specification.SpecificationPackage;
import inria.fuchsia.gag.xtext.services.GagGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GagSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GagGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProcessPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProcessPackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case ProcessPackage.PROCESS:
				sequence_Process(context, (inria.fuchsia.gag.gag.process.Process) semanticObject); 
				return; 
			case ProcessPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		else if (epackage == SpecificationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpecificationPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case SpecificationPackage.GAG:
				sequence_GAG(context, (GAG) semanticObject); 
				return; 
			case SpecificationPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case SpecificationPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case SpecificationPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString type=EString value=EJavaObject?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     (name=EString root=Task)
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.CONFIGURATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.CONFIGURATION__NAME));
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.CONFIGURATION__ROOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.CONFIGURATION__ROOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConfigurationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConfigurationAccess().getRootTaskParserRuleCall_4_0(), semanticObject.getRoot());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GAG returns GAG
	 *
	 * Constraint:
	 *     (name=EString rule+=Rule rule+=Rule*)
	 */
	protected void sequence_GAG(ISerializationContext context, GAG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     classPath=EString
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.GUARD__CLASS_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.GUARD__CLASS_PATH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardAccess().getClassPathEStringParserRuleCall_3_0(), semanticObject.getClassPath());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (configuration=Configuration specification=GAG)
	 */
	protected void sequence_Process(ISerializationContext context, inria.fuchsia.gag.gag.process.Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.PROCESS__CONFIGURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.PROCESS__CONFIGURATION));
			if (transientValues.isValueTransient(semanticObject, ProcessPackage.Literals.PROCESS__SPECIFICATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProcessPackage.Literals.PROCESS__SPECIFICATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcessAccess().getConfigurationConfigurationParserRuleCall_3_0(), semanticObject.getConfiguration());
		feeder.accept(grammarAccess.getProcessAccess().getSpecificationGAGParserRuleCall_5_0(), semanticObject.getSpecification());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=EString left_hand_side=Service (right_hand_side_service+=Service right_hand_side_service+=Service*)? guard=Guard?)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (name=EString (input+=Attribute input+=Attribute*)? (output+=Attribute output+=Attribute*)?)
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         is_open?='is_open'? 
	 *         name=EString 
	 *         id=ELong 
	 *         appliedRule=EString? 
	 *         associated_to=Service? 
	 *         (sub_task+=Task sub_task+=Task*)?
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
