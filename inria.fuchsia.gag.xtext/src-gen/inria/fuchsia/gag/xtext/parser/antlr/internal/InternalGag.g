/*
 * generated by Xtext 2.14.0
 */
grammar InternalGag;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package inria.fuchsia.gag.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package inria.fuchsia.gag.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import inria.fuchsia.gag.xtext.services.GagGrammarAccess;

}

@parser::members {

 	private GagGrammarAccess grammarAccess;

    public InternalGagParser(TokenStream input, GagGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Process";
   	}

   	@Override
   	protected GagGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Process'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcessKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='configuration'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getConfigurationKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getConfigurationConfigurationParserRuleCall_3_0());
				}
				lv_configuration_3_0=ruleConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					set(
						$current,
						"configuration",
						lv_configuration_3_0,
						"inria.fuchsia.gag.xtext.Gag.Configuration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='specification'
		{
			newLeafNode(otherlv_4, grammarAccess.getProcessAccess().getSpecificationKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getSpecificationGAGParserRuleCall_5_0());
				}
				lv_specification_5_0=ruleGAG
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					set(
						$current,
						"specification",
						lv_specification_5_0,
						"inria.fuchsia.gag.xtext.Gag.GAG");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Configuration'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getConfigurationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConfigurationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='root'
		{
			newLeafNode(otherlv_3, grammarAccess.getConfigurationAccess().getRootKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getRootTaskParserRuleCall_4_0());
				}
				lv_root_4_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"root",
						lv_root_4_0,
						"inria.fuchsia.gag.xtext.Gag.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getConfigurationAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleGAG
entryRuleGAG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGAGRule()); }
	iv_ruleGAG=ruleGAG
	{ $current=$iv_ruleGAG.current; }
	EOF;

// Rule GAG
ruleGAG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GAG'
		{
			newLeafNode(otherlv_0, grammarAccess.getGAGAccess().getGAGKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGAGAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGAGRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGAGAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='rule'
		{
			newLeafNode(otherlv_3, grammarAccess.getGAGAccess().getRuleKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getGAGAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGAGAccess().getRuleRuleParserRuleCall_5_0());
				}
				lv_rule_5_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGAGRule());
					}
					add(
						$current,
						"rule",
						lv_rule_5_0,
						"inria.fuchsia.gag.xtext.Gag.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getGAGAccess().getCommaKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGAGAccess().getRuleRuleParserRuleCall_6_1_0());
					}
					lv_rule_7_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGAGRule());
						}
						add(
							$current,
							"rule",
							lv_rule_7_0,
							"inria.fuchsia.gag.xtext.Gag.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getGAGAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getGAGAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_is_open_0_0='is_open'
				{
					newLeafNode(lv_is_open_0_0, grammarAccess.getTaskAccess().getIs_openIs_openKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed($current, "is_open", true, "is_open");
				}
			)
		)?
		otherlv_1='Task'
		{
			newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='id'
		{
			newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getIdKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getIdELongParserRuleCall_5_0());
				}
				lv_id_5_0=ruleELong
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"id",
						lv_id_5_0,
						"inria.fuchsia.gag.xtext.Gag.ELong");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='appliedRule'
			{
				newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getAppliedRuleKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getAppliedRuleEStringParserRuleCall_6_1_0());
					}
					lv_appliedRule_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						set(
							$current,
							"appliedRule",
							lv_appliedRule_7_0,
							"inria.fuchsia.gag.xtext.Gag.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='associated_to'
			{
				newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getAssociated_toKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getAssociated_toServiceParserRuleCall_7_1_0());
					}
					lv_associated_to_9_0=ruleService
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						set(
							$current,
							"associated_to",
							lv_associated_to_9_0,
							"inria.fuchsia.gag.xtext.Gag.Service");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10='sub_task'
			{
				newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getSub_taskKeyword_8_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getSub_taskTaskParserRuleCall_8_2_0());
					}
					lv_sub_task_12_0=ruleTask
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"sub_task",
							lv_sub_task_12_0,
							"inria.fuchsia.gag.xtext.Gag.Task");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getTaskAccess().getCommaKeyword_8_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTaskAccess().getSub_taskTaskParserRuleCall_8_3_1_0());
						}
						lv_sub_task_14_0=ruleTask
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTaskRule());
							}
							add(
								$current,
								"sub_task",
								lv_sub_task_14_0,
								"inria.fuchsia.gag.xtext.Gag.Task");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_8_4());
			}
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleELong
entryRuleELong returns [String current=null]:
	{ newCompositeNode(grammarAccess.getELongRule()); }
	iv_ruleELong=ruleELong
	{ $current=$iv_ruleELong.current.getText(); }
	EOF;

// Rule ELong
ruleELong returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELongAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getELongAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getServiceAccess().getServiceAction_0(),
					$current);
			}
		)
		otherlv_1='Service'
		{
			newLeafNode(otherlv_1, grammarAccess.getServiceAccess().getServiceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='input'
			{
				newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getInputKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getInputAttributeParserRuleCall_4_2_0());
					}
					lv_input_6_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"input",
							lv_input_6_0,
							"inria.fuchsia.gag.xtext.Gag.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getInputAttributeParserRuleCall_4_3_1_0());
						}
						lv_input_8_0=ruleAttribute
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"input",
								lv_input_8_0,
								"inria.fuchsia.gag.xtext.Gag.Attribute");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		(
			otherlv_10='output'
			{
				newLeafNode(otherlv_10, grammarAccess.getServiceAccess().getOutputKeyword_5_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getOutputAttributeParserRuleCall_5_2_0());
					}
					lv_output_12_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"output",
							lv_output_12_0,
							"inria.fuchsia.gag.xtext.Gag.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getServiceAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getOutputAttributeParserRuleCall_5_3_1_0());
						}
						lv_output_14_0=ruleAttribute
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"output",
								lv_output_14_0,
								"inria.fuchsia.gag.xtext.Gag.Attribute");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Attribute'
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getAttributeAccess().getTypeKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeAccess().getTypeEStringParserRuleCall_4_0());
				}
				lv_type_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='value'
			{
				newLeafNode(otherlv_5, grammarAccess.getAttributeAccess().getValueKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeAccess().getValueEJavaObjectParserRuleCall_5_1_0());
					}
					lv_value_6_0=ruleEJavaObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeRule());
						}
						set(
							$current,
							"value",
							lv_value_6_0,
							"inria.fuchsia.gag.xtext.Gag.EJavaObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEJavaObject
entryRuleEJavaObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEJavaObjectRule()); }
	iv_ruleEJavaObject=ruleEJavaObject
	{ $current=$iv_ruleEJavaObject.current.getText(); }
	EOF;

// Rule EJavaObject
ruleEJavaObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='EJavaObject'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEJavaObjectAccess().getEJavaObjectKeyword());
	}
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='left_hand_side'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getLeft_hand_sideKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLeft_hand_sideServiceParserRuleCall_4_0());
				}
				lv_left_hand_side_4_0=ruleService
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"left_hand_side",
						lv_left_hand_side_4_0,
						"inria.fuchsia.gag.xtext.Gag.Service");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='right_hand_side_service'
			{
				newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getRight_hand_side_serviceKeyword_5_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getRight_hand_side_serviceServiceParserRuleCall_5_2_0());
					}
					lv_right_hand_side_service_7_0=ruleService
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"right_hand_side_service",
							lv_right_hand_side_service_7_0,
							"inria.fuchsia.gag.xtext.Gag.Service");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getRight_hand_side_serviceServiceParserRuleCall_5_3_1_0());
						}
						lv_right_hand_side_service_9_0=ruleService
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"right_hand_side_service",
								lv_right_hand_side_service_9_0,
								"inria.fuchsia.gag.xtext.Gag.Service");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		(
			otherlv_11='guard'
			{
				newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getGuardKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getGuardGuardParserRuleCall_6_1_0());
					}
					lv_guard_12_0=ruleGuard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						set(
							$current,
							"guard",
							lv_guard_12_0,
							"inria.fuchsia.gag.xtext.Gag.Guard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	iv_ruleGuard=ruleGuard
	{ $current=$iv_ruleGuard.current; }
	EOF;

// Rule Guard
ruleGuard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Guard'
		{
			newLeafNode(otherlv_0, grammarAccess.getGuardAccess().getGuardKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGuardAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='classPath'
		{
			newLeafNode(otherlv_2, grammarAccess.getGuardAccess().getClassPathKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardAccess().getClassPathEStringParserRuleCall_3_0());
				}
				lv_classPath_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardRule());
					}
					set(
						$current,
						"classPath",
						lv_classPath_3_0,
						"inria.fuchsia.gag.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGuardAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
