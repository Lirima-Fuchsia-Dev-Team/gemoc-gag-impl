// automatically generated by Xtext
grammar inria.fuchsia.gag.xtext.Gag with org.eclipse.xtext.common.Terminals

import "http://inria.fuchsia.gag.gag/process/" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://inria.fuchsia.gag.gag/specification/" as specification

Process returns Process:
	'Process'
	'{'
		'configuration' configuration=Configuration
		'specification' specification=GAG
	'}';








Configuration returns Configuration:
	'Configuration'
	name=EString
	'{'
		'root' root=Task
	'}';

GAG returns specification::GAG:
	'GAG'
	name=EString
	'{'
		'rule' '{' rule+=Rule ( "," rule+=Rule)* '}' 
	'}';

Task returns Task:
	(is_open?='is_open')?
	'Task'
	name=EString
	'{'
		'id' id=ELong
		('appliedRule' appliedRule=EString)?
		('associated_to' associated_to=Service)?
		('sub_task' '{' sub_task+=Task ( "," sub_task+=Task)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

ELong returns ecore::ELong:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Service returns specification::Service:
	{specification::Service}
	'Service'
	name=EString
	'{'
		('input' '{' input+=Attribute ( "," input+=Attribute)* '}' )?
		('output' '{' output+=Attribute ( "," output+=Attribute)* '}' )?
	'}';

Attribute returns specification::Attribute:
	'Attribute'
	name=EString
	'{'
		'type' type=EString
		('value' value=EJavaObject)?
	'}';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

Rule returns specification::Rule:
	'Rule'
	name=EString
	'{'
		'left_hand_side' left_hand_side=Service
		('right_hand_side_service' '{' right_hand_side_service+=Service ( "," right_hand_side_service+=Service)* '}' )?
		('guard' guard=Guard)?
	'}';

Guard returns specification::Guard:
	'Guard'
	'{'
		'classPath' classPath=EString
	'}';
