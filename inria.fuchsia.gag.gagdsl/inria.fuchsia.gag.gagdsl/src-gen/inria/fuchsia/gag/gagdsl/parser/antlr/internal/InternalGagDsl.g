/*
 * generated by Xtext 2.14.0
 */
grammar InternalGagDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package inria.fuchsia.gag.gagdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package inria.fuchsia.gag.gagdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import inria.fuchsia.gag.gagdsl.services.GagDslGrammarAccess;

}

@parser::members {

 	private GagDslGrammarAccess grammarAccess;

    public InternalGagDslParser(TokenStream input, GagDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Configuration";
   	}

   	@Override
   	protected GagDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Configuration'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getConfigurationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.gagdsl.GagDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getConfigurationAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='root'
		{
			newLeafNode(otherlv_3, grammarAccess.getConfigurationAccess().getRootKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigurationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getRootTaskCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='consistent_to'
		{
			newLeafNode(otherlv_5, grammarAccess.getConfigurationAccess().getConsistent_toKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigurationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getConsistent_toGAGCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getConfigurationAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_is_open_0_0='is_open'
				{
					newLeafNode(lv_is_open_0_0, grammarAccess.getTaskAccess().getIs_openIs_openKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed($current, "is_open", true, "is_open");
				}
			)
		)?
		otherlv_1='Task'
		{
			newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"inria.fuchsia.gag.gagdsl.GagDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_3());
		}
		otherlv_4='id'
		{
			newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getIdKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getIdELongParserRuleCall_5_0());
				}
				lv_id_5_0=ruleELong
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"id",
						lv_id_5_0,
						"inria.fuchsia.gag.gagdsl.GagDsl.ELong");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='appliedRule'
			{
				newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getAppliedRuleKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getAppliedRuleEStringParserRuleCall_6_1_0());
					}
					lv_appliedRule_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						set(
							$current,
							"appliedRule",
							lv_appliedRule_7_0,
							"inria.fuchsia.gag.gagdsl.GagDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='instance_of'
			{
				newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getInstance_ofKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTaskRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTaskAccess().getInstance_ofServiceCrossReference_7_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_10='sub_task'
			{
				newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getSub_taskKeyword_8_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_8_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getSub_taskTaskParserRuleCall_8_2_0());
					}
					lv_sub_task_12_0=ruleTask
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"sub_task",
							lv_sub_task_12_0,
							"inria.fuchsia.gag.gagdsl.GagDsl.Task");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getTaskAccess().getCommaKeyword_8_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTaskAccess().getSub_taskTaskParserRuleCall_8_3_1_0());
						}
						lv_sub_task_14_0=ruleTask
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTaskRule());
							}
							add(
								$current,
								"sub_task",
								lv_sub_task_14_0,
								"inria.fuchsia.gag.gagdsl.GagDsl.Task");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_8_4());
			}
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleELong
entryRuleELong returns [String current=null]:
	{ newCompositeNode(grammarAccess.getELongRule()); }
	iv_ruleELong=ruleELong
	{ $current=$iv_ruleELong.current.getText(); }
	EOF;

// Rule ELong
ruleELong returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getELongAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getELongAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_defined_0_0='defined'
				{
					newLeafNode(lv_defined_0_0, grammarAccess.getValueAccess().getDefinedDefinedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
					setWithLastConsumed($current, "defined", true, "defined");
				}
			)
		)
		otherlv_1='Value'
		{
			newLeafNode(otherlv_1, grammarAccess.getValueAccess().getValueKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"inria.fuchsia.gag.gagdsl.GagDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getValueAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='value'
			{
				newLeafNode(otherlv_4, grammarAccess.getValueAccess().getValueKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueAccess().getValueEJavaObjectParserRuleCall_4_1_0());
					}
					lv_value_5_0=ruleEJavaObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"inria.fuchsia.gag.gagdsl.GagDsl.EJavaObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='sub_value'
			{
				newLeafNode(otherlv_6, grammarAccess.getValueAccess().getSub_valueKeyword_5_0());
			}
			otherlv_7='{'
			{
				newLeafNode(otherlv_7, grammarAccess.getValueAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueAccess().getSub_valueValueParserRuleCall_5_2_0());
					}
					lv_sub_value_8_0=ruleValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueRule());
						}
						add(
							$current,
							"sub_value",
							lv_sub_value_8_0,
							"inria.fuchsia.gag.gagdsl.GagDsl.Value");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getValueAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getValueAccess().getSub_valueValueParserRuleCall_5_3_1_0());
						}
						lv_sub_value_10_0=ruleValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueRule());
							}
							add(
								$current,
								"sub_value",
								lv_sub_value_10_0,
								"inria.fuchsia.gag.gagdsl.GagDsl.Value");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getValueAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getValueAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEJavaObject
entryRuleEJavaObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEJavaObjectRule()); }
	iv_ruleEJavaObject=ruleEJavaObject
	{ $current=$iv_ruleEJavaObject.current.getText(); }
	EOF;

// Rule EJavaObject
ruleEJavaObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='EJavaObject'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEJavaObjectAccess().getEJavaObjectKeyword());
	}
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"inria.fuchsia.gag.gagdsl.GagDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='left_hand_side'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getLeft_hand_sideKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLeft_hand_sideServiceCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='right_hand_side_service'
			{
				newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getRight_hand_side_serviceKeyword_5_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRuleAccess().getRight_hand_side_serviceServiceCrossReference_5_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRuleRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRuleAccess().getRight_hand_side_serviceServiceCrossReference_5_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getRuleAccess().getRightParenthesisKeyword_5_4());
			}
		)?
		(
			otherlv_11='guard'
			{
				newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getGuardKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getRuleAccess().getGuardGuardCrossReference_6_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
