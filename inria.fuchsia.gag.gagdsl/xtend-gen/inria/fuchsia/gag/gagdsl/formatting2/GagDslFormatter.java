/**
 * generated by Xtext 2.14.0
 */
package inria.fuchsia.gag.gagdsl.formatting2;

import com.google.inject.Inject;
import inria.fuchsia.gag.gagdsl.services.GagDslGrammarAccess;
import inria.fuchsia.gag.xdsml.gagmt.process.Task;
import inria.fuchsia.gag.xdsml.gagmt.specification.GAG;
import inria.fuchsia.gag.xdsml.gagmt.specification.Rule;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GagDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GagDslGrammarAccess _gagDslGrammarAccess;
  
  protected void _format(final Task task, @Extension final IFormattableDocument document) {
    EList<Task> _sub_task = task.getSub_task();
    for (final Task _task : _sub_task) {
      document.<Task>format(_task);
    }
  }
  
  protected void _format(final GAG gAG, @Extension final IFormattableDocument document) {
    EList<Rule> _rule = gAG.getRule();
    for (final Rule rule : _rule) {
      document.<Rule>format(rule);
    }
  }
  
  public void format(final Object task, final IFormattableDocument document) {
    if (task instanceof XtextResource) {
      _format((XtextResource)task, document);
      return;
    } else if (task instanceof Task) {
      _format((Task)task, document);
      return;
    } else if (task instanceof GAG) {
      _format((GAG)task, document);
      return;
    } else if (task instanceof EObject) {
      _format((EObject)task, document);
      return;
    } else if (task == null) {
      _format((Void)null, document);
      return;
    } else if (task != null) {
      _format(task, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(task, document).toString());
    }
  }
}
