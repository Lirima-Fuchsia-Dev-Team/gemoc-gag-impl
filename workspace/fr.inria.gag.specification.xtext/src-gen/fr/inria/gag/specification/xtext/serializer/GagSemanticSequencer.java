/*
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.serializer;

import com.google.inject.Inject;
import fr.inria.gag.specification.model.specification.DecompositionRule;
import fr.inria.gag.specification.model.specification.Equation;
import fr.inria.gag.specification.model.specification.FunctionDeclaration;
import fr.inria.gag.specification.model.specification.FunctionExpression;
import fr.inria.gag.specification.model.specification.GAG;
import fr.inria.gag.specification.model.specification.Guard;
import fr.inria.gag.specification.model.specification.IdExpression;
import fr.inria.gag.specification.model.specification.LocalData;
import fr.inria.gag.specification.model.specification.SemanticRule;
import fr.inria.gag.specification.model.specification.Service;
import fr.inria.gag.specification.model.specification.SpecificationPackage;
import fr.inria.gag.specification.xtext.services.GagGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GagSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GagGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SpecificationPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SpecificationPackage.DECOMPOSITION_RULE:
				sequence_DecompositionRule(context, (DecompositionRule) semanticObject); 
				return; 
			case SpecificationPackage.EQUATION:
				sequence_Equation(context, (Equation) semanticObject); 
				return; 
			case SpecificationPackage.FUNCTION_DECLARATION:
				sequence_FunctionDeclaration(context, (FunctionDeclaration) semanticObject); 
				return; 
			case SpecificationPackage.FUNCTION_EXPRESSION:
				sequence_FunctionExpression(context, (FunctionExpression) semanticObject); 
				return; 
			case SpecificationPackage.GAG:
				sequence_GAG(context, (GAG) semanticObject); 
				return; 
			case SpecificationPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case SpecificationPackage.ID_EXPRESSION:
				sequence_IdExpression(context, (IdExpression) semanticObject); 
				return; 
			case SpecificationPackage.LOCAL_DATA:
				sequence_LocalData(context, (LocalData) semanticObject); 
				return; 
			case SpecificationPackage.PARAMETER:
				sequence_Parameter(context, (fr.inria.gag.specification.model.specification.Parameter) semanticObject); 
				return; 
			case SpecificationPackage.SEMANTIC_RULE:
				sequence_SemanticRule(context, (SemanticRule) semanticObject); 
				return; 
			case SpecificationPackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DecompositionRule returns DecompositionRule
	 *
	 * Constraint:
	 *     (name=EString (subServices+=[Service|EString] subServices+=[Service|EString]*)? guard=Guard? semantic=SemanticRule?)
	 */
	protected void sequence_DecompositionRule(ISerializationContext context, DecompositionRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Equation returns Equation
	 *
	 * Constraint:
	 *     (leftpart=RightPartExpression rightpart=Expression)
	 */
	protected void sequence_Equation(ISerializationContext context, Equation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.EQUATION__LEFTPART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.EQUATION__LEFTPART));
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.EQUATION__RIGHTPART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.EQUATION__RIGHTPART));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEquationAccess().getLeftpartRightPartExpressionParserRuleCall_0_0(), semanticObject.getLeftpart());
		feeder.accept(grammarAccess.getEquationAccess().getRightpartExpressionParserRuleCall_2_0(), semanticObject.getRightpart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDeclaration returns FunctionDeclaration
	 *
	 * Constraint:
	 *     (name=EString location=EString method=EString)
	 */
	protected void sequence_FunctionDeclaration(ISerializationContext context, FunctionDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__LOCATION));
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.FUNCTION_DECLARATION__METHOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionDeclarationAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFunctionDeclarationAccess().getLocationEStringParserRuleCall_4_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getFunctionDeclarationAccess().getMethodEStringParserRuleCall_8_0(), semanticObject.getMethod());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns FunctionExpression
	 *     FunctionExpression returns FunctionExpression
	 *
	 * Constraint:
	 *     (function=[FunctionDeclaration|EString] (expressions+=RightPartExpression expressions+=RightPartExpression*)?)
	 */
	protected void sequence_FunctionExpression(ISerializationContext context, FunctionExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GAG returns GAG
	 *
	 * Constraint:
	 *     (name=EString (services+=Service services+=Service*)?)
	 */
	protected void sequence_GAG(ISerializationContext context, GAG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     (location=EString method=EString)
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.GUARD__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.GUARD__LOCATION));
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.GUARD__METHOD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.GUARD__METHOD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardAccess().getLocationEStringParserRuleCall_3_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getGuardAccess().getMethodEStringParserRuleCall_7_0(), semanticObject.getMethod());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IdExpression
	 *     RightPartExpression returns IdExpression
	 *     IdExpression returns IdExpression
	 *
	 * Constraint:
	 *     (serviceName=EString parameterName=EString)
	 */
	protected void sequence_IdExpression(ISerializationContext context, IdExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.ID_EXPRESSION__SERVICE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.ID_EXPRESSION__SERVICE_NAME));
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.ID_EXPRESSION__PARAMETER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.ID_EXPRESSION__PARAMETER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdExpressionAccess().getServiceNameEStringParserRuleCall_0_0(), semanticObject.getServiceName());
		feeder.accept(grammarAccess.getIdExpressionAccess().getParameterNameEStringParserRuleCall_2_0(), semanticObject.getParameterName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns LocalData
	 *     RightPartExpression returns LocalData
	 *     LocalData returns LocalData
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_LocalData(ISerializationContext context, LocalData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.LOCAL_DATA__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.LOCAL_DATA__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocalDataAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Parameter(ISerializationContext context, fr.inria.gag.specification.model.specification.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SpecificationPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SpecificationPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SemanticRule returns SemanticRule
	 *
	 * Constraint:
	 *     ((functionDeclaration+=FunctionDeclaration functionDeclaration+=FunctionDeclaration*)? (equations+=Equation equations+=Equation*)?)
	 */
	protected void sequence_SemanticRule(ISerializationContext context, SemanticRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *
	 * Constraint:
	 *     (
	 *         isAxiom?='Axiom'? 
	 *         name=EString 
	 *         (inputParameters+=Parameter inputParameters+=Parameter*)? 
	 *         (outputParameters+=Parameter outputParameters+=Parameter*)? 
	 *         rules+=DecompositionRule 
	 *         rules+=DecompositionRule*
	 *     )
	 */
	protected void sequence_Service(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
