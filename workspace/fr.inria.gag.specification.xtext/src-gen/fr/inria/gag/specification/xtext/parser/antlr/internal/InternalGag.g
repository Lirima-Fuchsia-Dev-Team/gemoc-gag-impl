/*
 * generated by Xtext 2.14.0
 */
grammar InternalGag;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.gag.specification.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.gag.specification.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.gag.specification.xtext.services.GagGrammarAccess;

}

@parser::members {

 	private GagGrammarAccess grammarAccess;

    public InternalGagParser(TokenStream input, GagGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GAG";
   	}

   	@Override
   	protected GagGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGAG
entryRuleGAG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGAGRule()); }
	iv_ruleGAG=ruleGAG
	{ $current=$iv_ruleGAG.current; }
	EOF;

// Rule GAG
ruleGAG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGAGAccess().getGAGAction_0(),
					$current);
			}
		)
		otherlv_1='GAG'
		{
			newLeafNode(otherlv_1, grammarAccess.getGAGAccess().getGAGKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGAGAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGAGRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getGAGAccess().getLeftCurlyBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGAGAccess().getServicesServiceParserRuleCall_3_1_0());
					}
					lv_services_4_0=ruleService
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGAGRule());
						}
						add(
							$current,
							"services",
							lv_services_4_0,
							"fr.inria.gag.specification.xtext.Gag.Service");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getGAGAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getGAGAccess().getServicesServiceParserRuleCall_3_2_1_0());
						}
						lv_services_6_0=ruleService
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGAGRule());
							}
							add(
								$current,
								"services",
								lv_services_6_0,
								"fr.inria.gag.specification.xtext.Gag.Service");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getGAGAccess().getRightCurlyBracketKeyword_3_3());
			}
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLeftPartExpressionParserRuleCall_0());
		}
		this_LeftPartExpression_0=ruleLeftPartExpression
		{
			$current = $this_LeftPartExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionExpressionParserRuleCall_1());
		}
		this_FunctionExpression_1=ruleFunctionExpression
		{
			$current = $this_FunctionExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isAxiom_0_0='Axiom'
				{
					newLeafNode(lv_isAxiom_0_0, grammarAccess.getServiceAccess().getIsAxiomAxiomKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceRule());
					}
					setWithLastConsumed($current, "isAxiom", true, "Axiom");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getInputParametersParameterParserRuleCall_2_1_0());
					}
					lv_inputParameters_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"inputParameters",
							lv_inputParameters_3_0,
							"fr.inria.gag.specification.xtext.Gag.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getInputParametersParameterParserRuleCall_2_2_1_0());
						}
						lv_inputParameters_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"inputParameters",
								lv_inputParameters_5_0,
								"fr.inria.gag.specification.xtext.Gag.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getServiceAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			otherlv_7='['
			{
				newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getLeftSquareBracketKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getOutputParametersParameterParserRuleCall_3_1_0());
					}
					lv_outputParameters_8_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"outputParameters",
							lv_outputParameters_8_0,
							"fr.inria.gag.specification.xtext.Gag.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=','
				{
					newLeafNode(otherlv_9, grammarAccess.getServiceAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getServiceAccess().getOutputParametersParameterParserRuleCall_3_2_1_0());
						}
						lv_outputParameters_10_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getServiceRule());
							}
							add(
								$current,
								"outputParameters",
								lv_outputParameters_10_0,
								"fr.inria.gag.specification.xtext.Gag.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_11=']'
			{
				newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getRightSquareBracketKeyword_3_3());
			}
		)?
		otherlv_12=':'
		{
			newLeafNode(otherlv_12, grammarAccess.getServiceAccess().getColonKeyword_4());
		}
		otherlv_13='{'
		{
			newLeafNode(otherlv_13, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getRulesDecompositionRuleParserRuleCall_6_0());
				}
				lv_rules_14_0=ruleDecompositionRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					add(
						$current,
						"rules",
						lv_rules_14_0,
						"fr.inria.gag.specification.xtext.Gag.DecompositionRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_15=','
			{
				newLeafNode(otherlv_15, grammarAccess.getServiceAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getRulesDecompositionRuleParserRuleCall_7_1_0());
					}
					lv_rules_16_0=ruleDecompositionRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"rules",
							lv_rules_16_0,
							"fr.inria.gag.specification.xtext.Gag.DecompositionRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_17='}'
		{
			newLeafNode(otherlv_17, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDecompositionRule
entryRuleDecompositionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecompositionRuleRule()); }
	iv_ruleDecompositionRule=ruleDecompositionRule
	{ $current=$iv_ruleDecompositionRule.current; }
	EOF;

// Rule DecompositionRule
ruleDecompositionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecompositionRuleAccess().getDecompositionRuleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDecompositionRuleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecompositionRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDecompositionRuleAccess().getColonKeyword_2());
		}
		(
			otherlv_3='sub'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecompositionRuleAccess().getSubKeyword_3_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getDecompositionRuleAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecompositionRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSubServicesServiceCrossReference_3_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getDecompositionRuleAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDecompositionRuleRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSubServicesServiceCrossReference_3_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='guard'
			{
				newLeafNode(otherlv_8, grammarAccess.getDecompositionRuleAccess().getGuardKeyword_4_0());
			}
			otherlv_9=':'
			{
				newLeafNode(otherlv_9, grammarAccess.getDecompositionRuleAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getGuardGuardParserRuleCall_4_2_0());
					}
					lv_guard_10_0=ruleGuard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDecompositionRuleRule());
						}
						set(
							$current,
							"guard",
							lv_guard_10_0,
							"fr.inria.gag.specification.xtext.Gag.Guard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_11='sem'
			{
				newLeafNode(otherlv_11, grammarAccess.getDecompositionRuleAccess().getSemKeyword_5_0());
			}
			otherlv_12=':'
			{
				newLeafNode(otherlv_12, grammarAccess.getDecompositionRuleAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSemanticSemanticRuleParserRuleCall_5_2_0());
					}
					lv_semantic_13_0=ruleSemanticRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDecompositionRuleRule());
						}
						set(
							$current,
							"semantic",
							lv_semantic_13_0,
							"fr.inria.gag.specification.xtext.Gag.SemanticRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	iv_ruleGuard=ruleGuard
	{ $current=$iv_ruleGuard.current; }
	EOF;

// Rule Guard
ruleGuard returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getGuardAccess().getLeftCurlyBracketKeyword_0());
		}
		otherlv_1='location'
		{
			newLeafNode(otherlv_1, grammarAccess.getGuardAccess().getLocationKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getGuardAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardAccess().getLocationEStringParserRuleCall_3_0());
				}
				lv_location_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardRule());
					}
					set(
						$current,
						"location",
						lv_location_3_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getGuardAccess().getCommaKeyword_4());
		}
		otherlv_5='method'
		{
			newLeafNode(otherlv_5, grammarAccess.getGuardAccess().getMethodKeyword_5());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getGuardAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGuardAccess().getMethodEStringParserRuleCall_7_0());
				}
				lv_method_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGuardRule());
					}
					set(
						$current,
						"method",
						lv_method_7_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getGuardAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleSemanticRule
entryRuleSemanticRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemanticRuleRule()); }
	iv_ruleSemanticRule=ruleSemanticRule
	{ $current=$iv_ruleSemanticRule.current; }
	EOF;

// Rule SemanticRule
ruleSemanticRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSemanticRuleAccess().getSemanticRuleAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSemanticRuleAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='func'
			{
				newLeafNode(otherlv_2, grammarAccess.getSemanticRuleAccess().getFuncKeyword_2_0());
			}
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getSemanticRuleAccess().getColonKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSemanticRuleAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_2_2_0());
					}
					lv_functionDeclaration_4_0=ruleFunctionDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSemanticRuleRule());
						}
						add(
							$current,
							"functionDeclaration",
							lv_functionDeclaration_4_0,
							"fr.inria.gag.specification.xtext.Gag.FunctionDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getSemanticRuleAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSemanticRuleAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_2_3_1_0());
						}
						lv_functionDeclaration_6_0=ruleFunctionDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSemanticRuleRule());
							}
							add(
								$current,
								"functionDeclaration",
								lv_functionDeclaration_6_0,
								"fr.inria.gag.specification.xtext.Gag.FunctionDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='equations'
			{
				newLeafNode(otherlv_7, grammarAccess.getSemanticRuleAccess().getEquationsKeyword_3_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getSemanticRuleAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSemanticRuleAccess().getEquationsEquationParserRuleCall_3_2_0());
					}
					lv_equations_9_0=ruleEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSemanticRuleRule());
						}
						add(
							$current,
							"equations",
							lv_equations_9_0,
							"fr.inria.gag.specification.xtext.Gag.Equation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSemanticRuleAccess().getEquationsEquationParserRuleCall_3_3_0());
					}
					lv_equations_10_0=ruleEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSemanticRuleRule());
						}
						add(
							$current,
							"equations",
							lv_equations_10_0,
							"fr.inria.gag.specification.xtext.Gag.Equation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getSemanticRuleAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_ruleFunctionDeclaration=ruleFunctionDeclaration
	{ $current=$iv_ruleFunctionDeclaration.current; }
	EOF;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='location'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getLocationKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getLocationEStringParserRuleCall_4_0());
				}
				lv_location_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"location",
						lv_location_4_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5());
		}
		otherlv_6='method'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getMethodKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getMethodEStringParserRuleCall_8_0());
				}
				lv_method_8_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"method",
						lv_method_8_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	iv_ruleEquation=ruleEquation
	{ $current=$iv_ruleEquation.current; }
	EOF;

// Rule Equation
ruleEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getLeftpartLeftPartExpressionParserRuleCall_0_0());
				}
				lv_leftpart_0_0=ruleLeftPartExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"leftpart",
						lv_leftpart_0_0,
						"fr.inria.gag.specification.xtext.Gag.LeftPartExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEquationAccess().getRightpartExpressionParserRuleCall_2_0());
				}
				lv_rightpart_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEquationRule());
					}
					set(
						$current,
						"rightpart",
						lv_rightpart_2_0,
						"fr.inria.gag.specification.xtext.Gag.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleLeftPartExpression
entryRuleLeftPartExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftPartExpressionRule()); }
	iv_ruleLeftPartExpression=ruleLeftPartExpression
	{ $current=$iv_ruleLeftPartExpression.current; }
	EOF;

// Rule LeftPartExpression
ruleLeftPartExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLeftPartExpressionAccess().getIdExpressionParserRuleCall_0());
		}
		this_IdExpression_0=ruleIdExpression
		{
			$current = $this_IdExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLeftPartExpressionAccess().getLocalDataParserRuleCall_1());
		}
		this_LocalData_1=ruleLocalData
		{
			$current = $this_LocalData_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLocalData
entryRuleLocalData returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocalDataRule()); }
	iv_ruleLocalData=ruleLocalData
	{ $current=$iv_ruleLocalData.current; }
	EOF;

// Rule LocalData
ruleLocalData returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getLocalDataAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLocalDataRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleIdExpression
entryRuleIdExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdExpressionRule()); }
	iv_ruleIdExpression=ruleIdExpression
	{ $current=$iv_ruleIdExpression.current; }
	EOF;

// Rule IdExpression
ruleIdExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIdExpressionAccess().getServiceNameEStringParserRuleCall_0_0());
				}
				lv_serviceName_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdExpressionRule());
					}
					set(
						$current,
						"serviceName",
						lv_serviceName_0_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getIdExpressionAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIdExpressionAccess().getParameterNameEStringParserRuleCall_2_0());
				}
				lv_parameterName_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdExpressionRule());
					}
					set(
						$current,
						"parameterName",
						lv_parameterName_2_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionExpression
entryRuleFunctionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionExpressionRule()); }
	iv_ruleFunctionExpression=ruleFunctionExpression
	{ $current=$iv_ruleFunctionExpression.current; }
	EOF;

// Rule FunctionExpression
ruleFunctionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionExpressionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFunctionExpressionAccess().getFunctionFunctionDeclarationCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionExpressionAccess().getExpressionsLeftPartExpressionParserRuleCall_2_0_0());
					}
					lv_expressions_2_0=ruleLeftPartExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"fr.inria.gag.specification.xtext.Gag.LeftPartExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionExpressionAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionExpressionAccess().getExpressionsLeftPartExpressionParserRuleCall_2_1_1_0());
						}
						lv_expressions_4_0=ruleLeftPartExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
							}
							add(
								$current,
								"expressions",
								lv_expressions_4_0,
								"fr.inria.gag.specification.xtext.Gag.LeftPartExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
