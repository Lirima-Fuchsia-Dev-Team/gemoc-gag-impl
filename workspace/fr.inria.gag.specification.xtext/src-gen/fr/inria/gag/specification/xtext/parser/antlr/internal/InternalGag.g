/*
 * generated by Xtext 2.14.0
 */
grammar InternalGag;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.gag.specification.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.gag.specification.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.gag.specification.xtext.services.GagGrammarAccess;

}

@parser::members {

 	private GagGrammarAccess grammarAccess;

    public InternalGagParser(TokenStream input, GagGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GAG";
   	}

   	@Override
   	protected GagGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGAG
entryRuleGAG returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGAGRule()); }
	iv_ruleGAG=ruleGAG
	{ $current=$iv_ruleGAG.current; }
	EOF;

// Rule GAG
ruleGAG returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGAGAccess().getGAGAction_0(),
					$current);
			}
		)
		otherlv_1='GAG'
		{
			newLeafNode(otherlv_1, grammarAccess.getGAGAccess().getGAGKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGAGAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGAGRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getGAGAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='services'
			{
				newLeafNode(otherlv_4, grammarAccess.getGAGAccess().getServicesKeyword_4_0());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getGAGAccess().getLeftCurlyBracketKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGAGAccess().getServicesServiceParserRuleCall_4_2_0());
					}
					lv_services_6_0=ruleService
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGAGRule());
						}
						add(
							$current,
							"services",
							lv_services_6_0,
							"fr.inria.gag.specification.xtext.Gag.Service");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getGAGAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getGAGAccess().getServicesServiceParserRuleCall_4_3_1_0());
						}
						lv_services_8_0=ruleService
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGAGRule());
							}
							add(
								$current,
								"services",
								lv_services_8_0,
								"fr.inria.gag.specification.xtext.Gag.Service");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9='}'
			{
				newLeafNode(otherlv_9, grammarAccess.getGAGAccess().getRightCurlyBracketKeyword_4_4());
			}
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getGAGAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleService
entryRuleService returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	iv_ruleService=ruleService
	{ $current=$iv_ruleService.current; }
	EOF;

// Rule Service
ruleService returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isAxiom_0_0='isAxiom'
				{
					newLeafNode(lv_isAxiom_0_0, grammarAccess.getServiceAccess().getIsAxiomIsAxiomKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getServiceRule());
					}
					setWithLastConsumed($current, "isAxiom", true, "isAxiom");
				}
			)
		)
		otherlv_1='Service'
		{
			newLeafNode(otherlv_1, grammarAccess.getServiceAccess().getServiceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='inputParameters'
			{
				newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getInputParametersKeyword_4_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getServiceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getServiceAccess().getInputParametersParameterCrossReference_4_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getServiceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getServiceAccess().getInputParametersParameterCrossReference_4_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getServiceAccess().getRightParenthesisKeyword_4_4());
			}
		)?
		(
			otherlv_10='outputParameters'
			{
				newLeafNode(otherlv_10, grammarAccess.getServiceAccess().getOutputParametersKeyword_5_0());
			}
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getServiceAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getServiceRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getServiceAccess().getOutputParametersParameterCrossReference_5_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getServiceAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getServiceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getServiceAccess().getOutputParametersParameterCrossReference_5_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getServiceAccess().getRightParenthesisKeyword_5_4());
			}
		)?
		otherlv_16='rules'
		{
			newLeafNode(otherlv_16, grammarAccess.getServiceAccess().getRulesKeyword_6());
		}
		otherlv_17='{'
		{
			newLeafNode(otherlv_17, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getServiceAccess().getRulesDecompositionRuleParserRuleCall_8_0());
				}
				lv_rules_18_0=ruleDecompositionRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getServiceRule());
					}
					add(
						$current,
						"rules",
						lv_rules_18_0,
						"fr.inria.gag.specification.xtext.Gag.DecompositionRule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_19=','
			{
				newLeafNode(otherlv_19, grammarAccess.getServiceAccess().getCommaKeyword_9_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getServiceAccess().getRulesDecompositionRuleParserRuleCall_9_1_0());
					}
					lv_rules_20_0=ruleDecompositionRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getServiceRule());
						}
						add(
							$current,
							"rules",
							lv_rules_20_0,
							"fr.inria.gag.specification.xtext.Gag.DecompositionRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_21='}'
		{
			newLeafNode(otherlv_21, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_10());
		}
		otherlv_22='}'
		{
			newLeafNode(otherlv_22, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_11());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDecompositionRule
entryRuleDecompositionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecompositionRuleRule()); }
	iv_ruleDecompositionRule=ruleDecompositionRule
	{ $current=$iv_ruleDecompositionRule.current; }
	EOF;

// Rule DecompositionRule
ruleDecompositionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecompositionRuleAccess().getDecompositionRuleAction_0(),
					$current);
			}
		)
		otherlv_1='DecompositionRule'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecompositionRuleAccess().getDecompositionRuleKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDecompositionRuleAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecompositionRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.gag.specification.xtext.Gag.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getDecompositionRuleAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='guard'
			{
				newLeafNode(otherlv_4, grammarAccess.getDecompositionRuleAccess().getGuardKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecompositionRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getGuardGuardCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='semantic'
			{
				newLeafNode(otherlv_6, grammarAccess.getDecompositionRuleAccess().getSemanticKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecompositionRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSemanticSemanticRuleCrossReference_5_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='subServices'
			{
				newLeafNode(otherlv_8, grammarAccess.getDecompositionRuleAccess().getSubServicesKeyword_6_0());
			}
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getDecompositionRuleAccess().getLeftParenthesisKeyword_6_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecompositionRuleRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSubServicesServiceCrossReference_6_2_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getDecompositionRuleAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDecompositionRuleRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getDecompositionRuleAccess().getSubServicesServiceCrossReference_6_3_1_0());
						}
						ruleEString
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_13=')'
			{
				newLeafNode(otherlv_13, grammarAccess.getDecompositionRuleAccess().getRightParenthesisKeyword_6_4());
			}
		)?
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getDecompositionRuleAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
