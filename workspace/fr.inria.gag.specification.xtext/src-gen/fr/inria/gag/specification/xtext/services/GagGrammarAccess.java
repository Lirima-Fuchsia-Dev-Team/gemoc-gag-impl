/*
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GagGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.GAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGAGAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGAGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cServicesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cServicesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cServicesServiceParserRuleCall_4_2_0 = (RuleCall)cServicesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cServicesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_4_3_1_0 = (RuleCall)cServicesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GAG:
		//	{GAG}
		//	'GAG'
		//	name=EString
		//	'{' ('services' '{' services+=Service ("," services+=Service)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{GAG} 'GAG' name=EString '{' ('services' '{' services+=Service ("," services+=Service)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{GAG}
		public Action getGAGAction_0() { return cGAGAction_0; }
		
		//'GAG'
		public Keyword getGAGKeyword_1() { return cGAGKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('services' '{' services+=Service ("," services+=Service)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'services'
		public Keyword getServicesKeyword_4_0() { return cServicesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//services+=Service
		public Assignment getServicesAssignment_4_2() { return cServicesAssignment_4_2; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_4_2_0() { return cServicesServiceParserRuleCall_4_2_0; }
		
		//("," services+=Service)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//services+=Service
		public Assignment getServicesAssignment_4_3_1() { return cServicesAssignment_4_3_1; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_4_3_1_0() { return cServicesServiceParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAxiomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAxiomIsAxiomKeyword_0_0 = (Keyword)cIsAxiomAssignment_0.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRulesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesDecompositionRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cRulesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cRulesDecompositionRuleParserRuleCall_7_1_0 = (RuleCall)cRulesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cInputParametersKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cInputParametersAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cInputParametersParameterParserRuleCall_9_2_0 = (RuleCall)cInputParametersAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cInputParametersAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cInputParametersParameterParserRuleCall_9_3_1_0 = (RuleCall)cInputParametersAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOutputParametersKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cOutputParametersAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cOutputParametersParameterParserRuleCall_10_2_0 = (RuleCall)cOutputParametersAssignment_10_2.eContents().get(0);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Keyword cCommaKeyword_10_3_0 = (Keyword)cGroup_10_3.eContents().get(0);
		private final Assignment cOutputParametersAssignment_10_3_1 = (Assignment)cGroup_10_3.eContents().get(1);
		private final RuleCall cOutputParametersParameterParserRuleCall_10_3_1_0 = (RuleCall)cOutputParametersAssignment_10_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Service:
		//	isAxiom?='isAxiom'
		//	'Service'
		//	name=EString
		//	'{'
		//	'rules' '{' rules+=DecompositionRule ("," rules+=DecompositionRule)* '}' ('inputParameters' '{'
		//	inputParameters+=Parameter ("," inputParameters+=Parameter)* '}')? ('outputParameters' '{'
		//	outputParameters+=Parameter ("," outputParameters+=Parameter)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAxiom?='isAxiom' 'Service' name=EString '{' 'rules' '{' rules+=DecompositionRule ("," rules+=DecompositionRule)* '}'
		//('inputParameters' '{' inputParameters+=Parameter ("," inputParameters+=Parameter)* '}')? ('outputParameters' '{'
		//outputParameters+=Parameter ("," outputParameters+=Parameter)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//isAxiom?='isAxiom'
		public Assignment getIsAxiomAssignment_0() { return cIsAxiomAssignment_0; }
		
		//'isAxiom'
		public Keyword getIsAxiomIsAxiomKeyword_0_0() { return cIsAxiomIsAxiomKeyword_0_0; }
		
		//'Service'
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'rules'
		public Keyword getRulesKeyword_4() { return cRulesKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//rules+=DecompositionRule
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }
		
		//DecompositionRule
		public RuleCall getRulesDecompositionRuleParserRuleCall_6_0() { return cRulesDecompositionRuleParserRuleCall_6_0; }
		
		//("," rules+=DecompositionRule)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//rules+=DecompositionRule
		public Assignment getRulesAssignment_7_1() { return cRulesAssignment_7_1; }
		
		//DecompositionRule
		public RuleCall getRulesDecompositionRuleParserRuleCall_7_1_0() { return cRulesDecompositionRuleParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//('inputParameters' '{' inputParameters+=Parameter ("," inputParameters+=Parameter)* '}')?
		public Group getGroup_9() { return cGroup_9; }
		
		//'inputParameters'
		public Keyword getInputParametersKeyword_9_0() { return cInputParametersKeyword_9_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }
		
		//inputParameters+=Parameter
		public Assignment getInputParametersAssignment_9_2() { return cInputParametersAssignment_9_2; }
		
		//Parameter
		public RuleCall getInputParametersParameterParserRuleCall_9_2_0() { return cInputParametersParameterParserRuleCall_9_2_0; }
		
		//("," inputParameters+=Parameter)*
		public Group getGroup_9_3() { return cGroup_9_3; }
		
		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }
		
		//inputParameters+=Parameter
		public Assignment getInputParametersAssignment_9_3_1() { return cInputParametersAssignment_9_3_1; }
		
		//Parameter
		public RuleCall getInputParametersParameterParserRuleCall_9_3_1_0() { return cInputParametersParameterParserRuleCall_9_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9_4() { return cRightCurlyBracketKeyword_9_4; }
		
		//('outputParameters' '{' outputParameters+=Parameter ("," outputParameters+=Parameter)* '}')?
		public Group getGroup_10() { return cGroup_10; }
		
		//'outputParameters'
		public Keyword getOutputParametersKeyword_10_0() { return cOutputParametersKeyword_10_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }
		
		//outputParameters+=Parameter
		public Assignment getOutputParametersAssignment_10_2() { return cOutputParametersAssignment_10_2; }
		
		//Parameter
		public RuleCall getOutputParametersParameterParserRuleCall_10_2_0() { return cOutputParametersParameterParserRuleCall_10_2_0; }
		
		//("," outputParameters+=Parameter)*
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//","
		public Keyword getCommaKeyword_10_3_0() { return cCommaKeyword_10_3_0; }
		
		//outputParameters+=Parameter
		public Assignment getOutputParametersAssignment_10_3_1() { return cOutputParametersAssignment_10_3_1; }
		
		//Parameter
		public RuleCall getOutputParametersParameterParserRuleCall_10_3_1_0() { return cOutputParametersParameterParserRuleCall_10_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10_4() { return cRightCurlyBracketKeyword_10_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class DecompositionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.DecompositionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecompositionRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecompositionRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubServicesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cSubServicesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cSubServicesServiceCrossReference_4_2_0 = (CrossReference)cSubServicesAssignment_4_2.eContents().get(0);
		private final RuleCall cSubServicesServiceEStringParserRuleCall_4_2_0_1 = (RuleCall)cSubServicesServiceCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cSubServicesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cSubServicesServiceCrossReference_4_3_1_0 = (CrossReference)cSubServicesAssignment_4_3_1.eContents().get(0);
		private final RuleCall cSubServicesServiceEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cSubServicesServiceCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGuardKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGuardAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_5_1_0 = (RuleCall)cGuardAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSemanticKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSemanticAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSemanticSemanticRuleParserRuleCall_6_1_0 = (RuleCall)cSemanticAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DecompositionRule:
		//	{DecompositionRule}
		//	'DecompositionRule'
		//	name=EString
		//	'{' ('subServices' '(' subServices+=[Service|EString] ("," subServices+=[Service|EString])* ')')? ('guard'
		//	guard=Guard)? ('semantic' semantic=SemanticRule)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DecompositionRule} 'DecompositionRule' name=EString '{' ('subServices' '(' subServices+=[Service|EString] (","
		//subServices+=[Service|EString])* ')')? ('guard' guard=Guard)? ('semantic' semantic=SemanticRule)? '}'
		public Group getGroup() { return cGroup; }
		
		//{DecompositionRule}
		public Action getDecompositionRuleAction_0() { return cDecompositionRuleAction_0; }
		
		//'DecompositionRule'
		public Keyword getDecompositionRuleKeyword_1() { return cDecompositionRuleKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('subServices' '(' subServices+=[Service|EString] ("," subServices+=[Service|EString])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'subServices'
		public Keyword getSubServicesKeyword_4_0() { return cSubServicesKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//subServices+=[Service|EString]
		public Assignment getSubServicesAssignment_4_2() { return cSubServicesAssignment_4_2; }
		
		//[Service|EString]
		public CrossReference getSubServicesServiceCrossReference_4_2_0() { return cSubServicesServiceCrossReference_4_2_0; }
		
		//EString
		public RuleCall getSubServicesServiceEStringParserRuleCall_4_2_0_1() { return cSubServicesServiceEStringParserRuleCall_4_2_0_1; }
		
		//("," subServices+=[Service|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//subServices+=[Service|EString]
		public Assignment getSubServicesAssignment_4_3_1() { return cSubServicesAssignment_4_3_1; }
		
		//[Service|EString]
		public CrossReference getSubServicesServiceCrossReference_4_3_1_0() { return cSubServicesServiceCrossReference_4_3_1_0; }
		
		//EString
		public RuleCall getSubServicesServiceEStringParserRuleCall_4_3_1_0_1() { return cSubServicesServiceEStringParserRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//('guard' guard=Guard)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'guard'
		public Keyword getGuardKeyword_5_0() { return cGuardKeyword_5_0; }
		
		//guard=Guard
		public Assignment getGuardAssignment_5_1() { return cGuardAssignment_5_1; }
		
		//Guard
		public RuleCall getGuardGuardParserRuleCall_5_1_0() { return cGuardGuardParserRuleCall_5_1_0; }
		
		//('semantic' semantic=SemanticRule)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'semantic'
		public Keyword getSemanticKeyword_6_0() { return cSemanticKeyword_6_0; }
		
		//semantic=SemanticRule
		public Assignment getSemanticAssignment_6_1() { return cSemanticAssignment_6_1; }
		
		//SemanticRule
		public RuleCall getSemanticSemanticRuleParserRuleCall_6_1_0() { return cSemanticSemanticRuleParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	{Parameter}
		//	'Parameter'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} 'Parameter' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGuardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cClassPathKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClassPathAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClassPathEStringParserRuleCall_3_1_0 = (RuleCall)cClassPathAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Guard:
		//	{Guard}
		//	'Guard'
		//	'{' ('classPath' classPath=EString)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Guard} 'Guard' '{' ('classPath' classPath=EString)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//'Guard'
		public Keyword getGuardKeyword_1() { return cGuardKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('classPath' classPath=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'classPath'
		public Keyword getClassPathKeyword_3_0() { return cClassPathKeyword_3_0; }
		
		//classPath=EString
		public Assignment getClassPathAssignment_3_1() { return cClassPathAssignment_3_1; }
		
		//EString
		public RuleCall getClassPathEStringParserRuleCall_3_1_0() { return cClassPathEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SemanticRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.SemanticRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemanticRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSemanticRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SemanticRule:
		//	{SemanticRule}
		//	'SemanticRule';
		@Override public ParserRule getRule() { return rule; }
		
		//{SemanticRule} 'SemanticRule'
		public Group getGroup() { return cGroup; }
		
		//{SemanticRule}
		public Action getSemanticRuleAction_0() { return cSemanticRuleAction_0; }
		
		//'SemanticRule'
		public Keyword getSemanticRuleKeyword_1() { return cSemanticRuleKeyword_1; }
	}
	
	
	private final GAGElements pGAG;
	private final ServiceElements pService;
	private final EStringElements pEString;
	private final DecompositionRuleElements pDecompositionRule;
	private final ParameterElements pParameter;
	private final EBooleanElements pEBoolean;
	private final GuardElements pGuard;
	private final SemanticRuleElements pSemanticRule;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GagGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGAG = new GAGElements();
		this.pService = new ServiceElements();
		this.pEString = new EStringElements();
		this.pDecompositionRule = new DecompositionRuleElements();
		this.pParameter = new ParameterElements();
		this.pEBoolean = new EBooleanElements();
		this.pGuard = new GuardElements();
		this.pSemanticRule = new SemanticRuleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.gag.specification.xtext.Gag".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GAG:
	//	{GAG}
	//	'GAG'
	//	name=EString
	//	'{' ('services' '{' services+=Service ("," services+=Service)* '}')?
	//	'}';
	public GAGElements getGAGAccess() {
		return pGAG;
	}
	
	public ParserRule getGAGRule() {
		return getGAGAccess().getRule();
	}
	
	//Service:
	//	isAxiom?='isAxiom'
	//	'Service'
	//	name=EString
	//	'{'
	//	'rules' '{' rules+=DecompositionRule ("," rules+=DecompositionRule)* '}' ('inputParameters' '{'
	//	inputParameters+=Parameter ("," inputParameters+=Parameter)* '}')? ('outputParameters' '{'
	//	outputParameters+=Parameter ("," outputParameters+=Parameter)* '}')?
	//	'}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//DecompositionRule:
	//	{DecompositionRule}
	//	'DecompositionRule'
	//	name=EString
	//	'{' ('subServices' '(' subServices+=[Service|EString] ("," subServices+=[Service|EString])* ')')? ('guard'
	//	guard=Guard)? ('semantic' semantic=SemanticRule)?
	//	'}';
	public DecompositionRuleElements getDecompositionRuleAccess() {
		return pDecompositionRule;
	}
	
	public ParserRule getDecompositionRuleRule() {
		return getDecompositionRuleAccess().getRule();
	}
	
	//Parameter:
	//	{Parameter}
	//	'Parameter'
	//	name=EString;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Guard:
	//	{Guard}
	//	'Guard'
	//	'{' ('classPath' classPath=EString)?
	//	'}';
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//SemanticRule:
	//	{SemanticRule}
	//	'SemanticRule';
	public SemanticRuleElements getSemanticRuleAccess() {
		return pSemanticRule;
	}
	
	public ParserRule getSemanticRuleRule() {
		return getSemanticRuleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
