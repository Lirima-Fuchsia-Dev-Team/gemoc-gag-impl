/*
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GagGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.GAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGAGAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGAGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cServicesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_3_1_0 = (RuleCall)cServicesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cServicesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_3_2_1_0 = (RuleCall)cServicesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//GAG:
		//	{GAG}
		//	'GAG'
		//	name=EString ('{' services+=Service ("," services+=Service)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GAG} 'GAG' name=EString ('{' services+=Service ("," services+=Service)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{GAG}
		public Action getGAGAction_0() { return cGAGAction_0; }
		
		//'GAG'
		public Keyword getGAGKeyword_1() { return cGAGKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('{' services+=Service ("," services+=Service)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//services+=Service
		public Assignment getServicesAssignment_3_1() { return cServicesAssignment_3_1; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_3_1_0() { return cServicesServiceParserRuleCall_3_1_0; }
		
		//("," services+=Service)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//services+=Service
		public Assignment getServicesAssignment_3_2_1() { return cServicesAssignment_3_2_1; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_3_2_1_0() { return cServicesServiceParserRuleCall_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	IdExpression | FunctionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IdExpression | FunctionExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IdExpression
		public RuleCall getIdExpressionParserRuleCall_0() { return cIdExpressionParserRuleCall_0; }
		
		//FunctionExpression
		public RuleCall getFunctionExpressionParserRuleCall_1() { return cFunctionExpressionParserRuleCall_1; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAxiomAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAxiomAxiomKeyword_0_0 = (Keyword)cIsAxiomAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInputParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInputParametersParameterParserRuleCall_2_1_0 = (RuleCall)cInputParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInputParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInputParametersParameterParserRuleCall_2_2_1_0 = (RuleCall)cInputParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutputParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutputParametersParameterParserRuleCall_3_1_0 = (RuleCall)cOutputParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOutputParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOutputParametersParameterParserRuleCall_3_2_1_0 = (RuleCall)cOutputParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesDecompositionRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cRulesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cRulesDecompositionRuleParserRuleCall_7_1_0 = (RuleCall)cRulesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Service:
		//	isAxiom?='Axiom'?
		//	name=EString ('(' inputParameters+=Parameter ("," inputParameters+=Parameter)* ')')? ('[' outputParameters+=Parameter
		//	("," outputParameters+=Parameter)* ']')?
		//	':' '{' rules+=DecompositionRule ("," rules+=DecompositionRule)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAxiom?='Axiom'? name=EString ('(' inputParameters+=Parameter ("," inputParameters+=Parameter)* ')')? ('['
		//outputParameters+=Parameter ("," outputParameters+=Parameter)* ']')? ':' '{' rules+=DecompositionRule (","
		//rules+=DecompositionRule)* '}'
		public Group getGroup() { return cGroup; }
		
		//isAxiom?='Axiom'?
		public Assignment getIsAxiomAssignment_0() { return cIsAxiomAssignment_0; }
		
		//'Axiom'
		public Keyword getIsAxiomAxiomKeyword_0_0() { return cIsAxiomAxiomKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('(' inputParameters+=Parameter ("," inputParameters+=Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//inputParameters+=Parameter
		public Assignment getInputParametersAssignment_2_1() { return cInputParametersAssignment_2_1; }
		
		//Parameter
		public RuleCall getInputParametersParameterParserRuleCall_2_1_0() { return cInputParametersParameterParserRuleCall_2_1_0; }
		
		//("," inputParameters+=Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//inputParameters+=Parameter
		public Assignment getInputParametersAssignment_2_2_1() { return cInputParametersAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getInputParametersParameterParserRuleCall_2_2_1_0() { return cInputParametersParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('[' outputParameters+=Parameter ("," outputParameters+=Parameter)* ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//outputParameters+=Parameter
		public Assignment getOutputParametersAssignment_3_1() { return cOutputParametersAssignment_3_1; }
		
		//Parameter
		public RuleCall getOutputParametersParameterParserRuleCall_3_1_0() { return cOutputParametersParameterParserRuleCall_3_1_0; }
		
		//("," outputParameters+=Parameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//outputParameters+=Parameter
		public Assignment getOutputParametersAssignment_3_2_1() { return cOutputParametersAssignment_3_2_1; }
		
		//Parameter
		public RuleCall getOutputParametersParameterParserRuleCall_3_2_1_0() { return cOutputParametersParameterParserRuleCall_3_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//rules+=DecompositionRule
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }
		
		//DecompositionRule
		public RuleCall getRulesDecompositionRuleParserRuleCall_6_0() { return cRulesDecompositionRuleParserRuleCall_6_0; }
		
		//("," rules+=DecompositionRule)*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//rules+=DecompositionRule
		public Assignment getRulesAssignment_7_1() { return cRulesAssignment_7_1; }
		
		//DecompositionRule
		public RuleCall getRulesDecompositionRuleParserRuleCall_7_1_0() { return cRulesDecompositionRuleParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class DecompositionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.DecompositionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecompositionRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSubKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSubServicesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSubServicesServiceCrossReference_3_2_0 = (CrossReference)cSubServicesAssignment_3_2.eContents().get(0);
		private final RuleCall cSubServicesServiceEStringParserRuleCall_3_2_0_1 = (RuleCall)cSubServicesServiceCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cSubServicesAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cSubServicesServiceCrossReference_3_3_1_0 = (CrossReference)cSubServicesAssignment_3_3_1.eContents().get(0);
		private final RuleCall cSubServicesServiceEStringParserRuleCall_3_3_1_0_1 = (RuleCall)cSubServicesServiceCrossReference_3_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGuardKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGuardAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_4_1_0 = (RuleCall)cGuardAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSemKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cSemanticAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cSemanticSemanticRuleParserRuleCall_5_2_0 = (RuleCall)cSemanticAssignment_5_2.eContents().get(0);
		
		//DecompositionRule:
		//	{DecompositionRule} name=EString
		//	':' ('sub' ':' subServices+=[Service|EString] ("," subServices+=[Service|EString])*)? ('guard' guard=Guard)? ('sem'
		//	':' semantic=SemanticRule)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecompositionRule} name=EString ':' ('sub' ':' subServices+=[Service|EString] ("," subServices+=[Service|EString])*)?
		//('guard' guard=Guard)? ('sem' ':' semantic=SemanticRule)?
		public Group getGroup() { return cGroup; }
		
		//{DecompositionRule}
		public Action getDecompositionRuleAction_0() { return cDecompositionRuleAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//('sub' ':' subServices+=[Service|EString] ("," subServices+=[Service|EString])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'sub'
		public Keyword getSubKeyword_3_0() { return cSubKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//subServices+=[Service|EString]
		public Assignment getSubServicesAssignment_3_2() { return cSubServicesAssignment_3_2; }
		
		//[Service|EString]
		public CrossReference getSubServicesServiceCrossReference_3_2_0() { return cSubServicesServiceCrossReference_3_2_0; }
		
		//EString
		public RuleCall getSubServicesServiceEStringParserRuleCall_3_2_0_1() { return cSubServicesServiceEStringParserRuleCall_3_2_0_1; }
		
		//("," subServices+=[Service|EString])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//subServices+=[Service|EString]
		public Assignment getSubServicesAssignment_3_3_1() { return cSubServicesAssignment_3_3_1; }
		
		//[Service|EString]
		public CrossReference getSubServicesServiceCrossReference_3_3_1_0() { return cSubServicesServiceCrossReference_3_3_1_0; }
		
		//EString
		public RuleCall getSubServicesServiceEStringParserRuleCall_3_3_1_0_1() { return cSubServicesServiceEStringParserRuleCall_3_3_1_0_1; }
		
		//('guard' guard=Guard)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'guard'
		public Keyword getGuardKeyword_4_0() { return cGuardKeyword_4_0; }
		
		//guard=Guard
		public Assignment getGuardAssignment_4_1() { return cGuardAssignment_4_1; }
		
		//Guard
		public RuleCall getGuardGuardParserRuleCall_4_1_0() { return cGuardGuardParserRuleCall_4_1_0; }
		
		//('sem' ':' semantic=SemanticRule)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sem'
		public Keyword getSemKeyword_5_0() { return cSemKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//semantic=SemanticRule
		public Assignment getSemanticAssignment_5_2() { return cSemanticAssignment_5_2; }
		
		//SemanticRule
		public RuleCall getSemanticSemanticRuleParserRuleCall_5_2_0() { return cSemanticSemanticRuleParserRuleCall_5_2_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////'';
		//Parameter:
		//	{Parameter} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassPathEStringParserRuleCall_3_0 = (RuleCall)cClassPathAssignment_3.eContents().get(0);
		private final Keyword cLibLocationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLibLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLibLocationEStringParserRuleCall_5_0 = (RuleCall)cLibLocationAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Guard:
		//	'Guard'
		//	'{'
		//	'classPath' classPath=EString
		//	'libLocation' libLocation=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Guard' '{' 'classPath' classPath=EString 'libLocation' libLocation=EString '}'
		public Group getGroup() { return cGroup; }
		
		//'Guard'
		public Keyword getGuardKeyword_0() { return cGuardKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'classPath'
		public Keyword getClassPathKeyword_2() { return cClassPathKeyword_2; }
		
		//classPath=EString
		public Assignment getClassPathAssignment_3() { return cClassPathAssignment_3; }
		
		//EString
		public RuleCall getClassPathEStringParserRuleCall_3_0() { return cClassPathEStringParserRuleCall_3_0; }
		
		//'libLocation'
		public Keyword getLibLocationKeyword_4() { return cLibLocationKeyword_4; }
		
		//libLocation=EString
		public Assignment getLibLocationAssignment_5() { return cLibLocationAssignment_5; }
		
		//EString
		public RuleCall getLibLocationEStringParserRuleCall_5_0() { return cLibLocationEStringParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SemanticRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.SemanticRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSemanticRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFuncKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFunctionDeclarationAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cFunctionDeclarationFunctionDeclarationParserRuleCall_2_2_0 = (RuleCall)cFunctionDeclarationAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cFunctionDeclarationAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cFunctionDeclarationFunctionDeclarationParserRuleCall_2_3_1_0 = (RuleCall)cFunctionDeclarationAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEquationsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEquationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEquationsEquationParserRuleCall_3_2_0 = (RuleCall)cEquationsAssignment_3_2.eContents().get(0);
		private final Assignment cEquationsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEquationsEquationParserRuleCall_3_3_0 = (RuleCall)cEquationsAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SemanticRule:
		//	{SemanticRule}
		//	'{' ('func' ':' functionDeclaration+=FunctionDeclaration ("," functionDeclaration+=FunctionDeclaration)*)?
		//	('equations' ':' equations+=Equation equations+=Equation*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SemanticRule} '{' ('func' ':' functionDeclaration+=FunctionDeclaration (","
		//functionDeclaration+=FunctionDeclaration)*)? ('equations' ':' equations+=Equation equations+=Equation*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SemanticRule}
		public Action getSemanticRuleAction_0() { return cSemanticRuleAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('func' ':' functionDeclaration+=FunctionDeclaration ("," functionDeclaration+=FunctionDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'func'
		public Keyword getFuncKeyword_2_0() { return cFuncKeyword_2_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//functionDeclaration+=FunctionDeclaration
		public Assignment getFunctionDeclarationAssignment_2_2() { return cFunctionDeclarationAssignment_2_2; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationFunctionDeclarationParserRuleCall_2_2_0() { return cFunctionDeclarationFunctionDeclarationParserRuleCall_2_2_0; }
		
		//("," functionDeclaration+=FunctionDeclaration)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//functionDeclaration+=FunctionDeclaration
		public Assignment getFunctionDeclarationAssignment_2_3_1() { return cFunctionDeclarationAssignment_2_3_1; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationFunctionDeclarationParserRuleCall_2_3_1_0() { return cFunctionDeclarationFunctionDeclarationParserRuleCall_2_3_1_0; }
		
		//('equations' ':' equations+=Equation equations+=Equation*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'equations'
		public Keyword getEquationsKeyword_3_0() { return cEquationsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//equations+=Equation
		public Assignment getEquationsAssignment_3_2() { return cEquationsAssignment_3_2; }
		
		//Equation
		public RuleCall getEquationsEquationParserRuleCall_3_2_0() { return cEquationsEquationParserRuleCall_3_2_0; }
		
		//equations+=Equation*
		public Assignment getEquationsAssignment_3_3() { return cEquationsAssignment_3_3; }
		
		//Equation
		public RuleCall getEquationsEquationParserRuleCall_3_3_0() { return cEquationsEquationParserRuleCall_3_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassPathKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassPathEStringParserRuleCall_3_0 = (RuleCall)cClassPathAssignment_3.eContents().get(0);
		private final Keyword cMethodKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodEStringParserRuleCall_5_0 = (RuleCall)cMethodAssignment_5.eContents().get(0);
		private final Keyword cLibLocationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLibLocationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLibLocationEStringParserRuleCall_7_0 = (RuleCall)cLibLocationAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDeclaration:
		//	name=EString
		//	'{'
		//	'classPath' classPath=EString
		//	'method' method=EString
		//	'libLocation' libLocation=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		////'FunctionDeclaration'
		//name=EString '{' 'classPath' classPath=EString 'method' method=EString 'libLocation' libLocation=EString '}'
		public Group getGroup() { return cGroup; }
		
		////'FunctionDeclaration'
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'classPath'
		public Keyword getClassPathKeyword_2() { return cClassPathKeyword_2; }
		
		//classPath=EString
		public Assignment getClassPathAssignment_3() { return cClassPathAssignment_3; }
		
		//EString
		public RuleCall getClassPathEStringParserRuleCall_3_0() { return cClassPathEStringParserRuleCall_3_0; }
		
		//'method'
		public Keyword getMethodKeyword_4() { return cMethodKeyword_4; }
		
		//method=EString
		public Assignment getMethodAssignment_5() { return cMethodAssignment_5; }
		
		//EString
		public RuleCall getMethodEStringParserRuleCall_5_0() { return cMethodEStringParserRuleCall_5_0; }
		
		//'libLocation'
		public Keyword getLibLocationKeyword_6() { return cLibLocationKeyword_6; }
		
		//libLocation=EString
		public Assignment getLibLocationAssignment_7() { return cLibLocationAssignment_7; }
		
		//EString
		public RuleCall getLibLocationEStringParserRuleCall_7_0() { return cLibLocationEStringParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftpartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftpartIdExpressionParserRuleCall_0_0 = (RuleCall)cLeftpartAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightpartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightpartExpressionParserRuleCall_2_0 = (RuleCall)cRightpartAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Equation:
		//	leftpart=IdExpression
		//	'=' rightpart=Expression
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//leftpart=IdExpression '=' rightpart=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//leftpart=IdExpression
		public Assignment getLeftpartAssignment_0() { return cLeftpartAssignment_0; }
		
		//IdExpression
		public RuleCall getLeftpartIdExpressionParserRuleCall_0_0() { return cLeftpartIdExpressionParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//rightpart=Expression
		public Assignment getRightpartAssignment_2() { return cRightpartAssignment_2; }
		
		//Expression
		public RuleCall getRightpartExpressionParserRuleCall_2_0() { return cRightpartExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class IdExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.IdExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cServiceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cServiceNameEStringParserRuleCall_0_0 = (RuleCall)cServiceNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterNameEStringParserRuleCall_2_0 = (RuleCall)cParameterNameAssignment_2.eContents().get(0);
		
		//IdExpression:
		//	serviceName=EString
		//	'.' parameterName=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//serviceName=EString '.' parameterName=EString
		public Group getGroup() { return cGroup; }
		
		//serviceName=EString
		public Assignment getServiceNameAssignment_0() { return cServiceNameAssignment_0; }
		
		//EString
		public RuleCall getServiceNameEStringParserRuleCall_0_0() { return cServiceNameEStringParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//parameterName=EString
		public Assignment getParameterNameAssignment_2() { return cParameterNameAssignment_2; }
		
		//EString
		public RuleCall getParameterNameEStringParserRuleCall_2_0() { return cParameterNameEStringParserRuleCall_2_0; }
	}
	public class FunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.inria.gag.specification.xtext.Gag.FunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionDeclarationCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionDeclarationEStringParserRuleCall_0_0_1 = (RuleCall)cFunctionFunctionDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdExpressionsIdExpressionParserRuleCall_2_0_0 = (RuleCall)cIdExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdExpressionsIdExpressionParserRuleCall_2_1_1_0 = (RuleCall)cIdExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionExpression:
		//	function=[FunctionDeclaration|EString]
		//	'(' (idExpressions+=IdExpression ("," idExpressions+=IdExpression)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=[FunctionDeclaration|EString] '(' (idExpressions+=IdExpression ("," idExpressions+=IdExpression)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[FunctionDeclaration|EString]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[FunctionDeclaration|EString]
		public CrossReference getFunctionFunctionDeclarationCrossReference_0_0() { return cFunctionFunctionDeclarationCrossReference_0_0; }
		
		//EString
		public RuleCall getFunctionFunctionDeclarationEStringParserRuleCall_0_0_1() { return cFunctionFunctionDeclarationEStringParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(idExpressions+=IdExpression ("," idExpressions+=IdExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//idExpressions+=IdExpression
		public Assignment getIdExpressionsAssignment_2_0() { return cIdExpressionsAssignment_2_0; }
		
		//IdExpression
		public RuleCall getIdExpressionsIdExpressionParserRuleCall_2_0_0() { return cIdExpressionsIdExpressionParserRuleCall_2_0_0; }
		
		//("," idExpressions+=IdExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//idExpressions+=IdExpression
		public Assignment getIdExpressionsAssignment_2_1_1() { return cIdExpressionsAssignment_2_1_1; }
		
		//IdExpression
		public RuleCall getIdExpressionsIdExpressionParserRuleCall_2_1_1_0() { return cIdExpressionsIdExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	
	private final GAGElements pGAG;
	private final ExpressionElements pExpression;
	private final ServiceElements pService;
	private final EStringElements pEString;
	private final DecompositionRuleElements pDecompositionRule;
	private final ParameterElements pParameter;
	private final EBooleanElements pEBoolean;
	private final GuardElements pGuard;
	private final SemanticRuleElements pSemanticRule;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final EquationElements pEquation;
	private final IdExpressionElements pIdExpression;
	private final FunctionExpressionElements pFunctionExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GagGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGAG = new GAGElements();
		this.pExpression = new ExpressionElements();
		this.pService = new ServiceElements();
		this.pEString = new EStringElements();
		this.pDecompositionRule = new DecompositionRuleElements();
		this.pParameter = new ParameterElements();
		this.pEBoolean = new EBooleanElements();
		this.pGuard = new GuardElements();
		this.pSemanticRule = new SemanticRuleElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pEquation = new EquationElements();
		this.pIdExpression = new IdExpressionElements();
		this.pFunctionExpression = new FunctionExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.gag.specification.xtext.Gag".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GAG:
	//	{GAG}
	//	'GAG'
	//	name=EString ('{' services+=Service ("," services+=Service)* '}')?;
	public GAGElements getGAGAccess() {
		return pGAG;
	}
	
	public ParserRule getGAGRule() {
		return getGAGAccess().getRule();
	}
	
	//Expression:
	//	IdExpression | FunctionExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Service:
	//	isAxiom?='Axiom'?
	//	name=EString ('(' inputParameters+=Parameter ("," inputParameters+=Parameter)* ')')? ('[' outputParameters+=Parameter
	//	("," outputParameters+=Parameter)* ']')?
	//	':' '{' rules+=DecompositionRule ("," rules+=DecompositionRule)* '}';
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//DecompositionRule:
	//	{DecompositionRule} name=EString
	//	':' ('sub' ':' subServices+=[Service|EString] ("," subServices+=[Service|EString])*)? ('guard' guard=Guard)? ('sem'
	//	':' semantic=SemanticRule)?;
	public DecompositionRuleElements getDecompositionRuleAccess() {
		return pDecompositionRule;
	}
	
	public ParserRule getDecompositionRuleRule() {
		return getDecompositionRuleAccess().getRule();
	}
	
	////'';
	//Parameter:
	//	{Parameter} name=EString;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Guard:
	//	'Guard'
	//	'{'
	//	'classPath' classPath=EString
	//	'libLocation' libLocation=EString
	//	'}';
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//SemanticRule:
	//	{SemanticRule}
	//	'{' ('func' ':' functionDeclaration+=FunctionDeclaration ("," functionDeclaration+=FunctionDeclaration)*)?
	//	('equations' ':' equations+=Equation equations+=Equation*)?
	//	'}';
	public SemanticRuleElements getSemanticRuleAccess() {
		return pSemanticRule;
	}
	
	public ParserRule getSemanticRuleRule() {
		return getSemanticRuleAccess().getRule();
	}
	
	//FunctionDeclaration:
	//	name=EString
	//	'{'
	//	'classPath' classPath=EString
	//	'method' method=EString
	//	'libLocation' libLocation=EString
	//	'}';
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//Equation:
	//	leftpart=IdExpression
	//	'=' rightpart=Expression
	//	';';
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}
	
	//IdExpression:
	//	serviceName=EString
	//	'.' parameterName=EString;
	public IdExpressionElements getIdExpressionAccess() {
		return pIdExpression;
	}
	
	public ParserRule getIdExpressionRule() {
		return getIdExpressionAccess().getRule();
	}
	
	//FunctionExpression:
	//	function=[FunctionDeclaration|EString]
	//	'(' (idExpressions+=IdExpression ("," idExpressions+=IdExpression)*)? ')';
	public FunctionExpressionElements getFunctionExpressionAccess() {
		return pFunctionExpression;
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
