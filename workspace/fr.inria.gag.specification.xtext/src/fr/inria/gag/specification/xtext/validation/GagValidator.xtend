/*
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.validation

import org.eclipse.xtext.validation.Check
import fr.inria.gag.specification.model.specification.DecompositionRule
import fr.inria.gag.configuration.model.configuration.Task
import fr.inria.gag.specification.model.specification.Service
import fr.inria.gag.configuration.model.configuration.ConfigurationFactory
import fr.inria.gag.specification.model.specification.SpecificationPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class GagValidator extends AbstractGagValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					GagPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def checkVariableDefinition(DecompositionRule rule) {
		
		var service = rule.eContainer as Service;
		warning('my warning work '+service.name,SpecificationPackage.Literals.DECOMPOSITION_RULE__SUB_SERVICES);
		
	}
	
	def void initTask(Task t, Service s) {
		t.service = s;
		t.isOpen = true;
		for (i : 0 ..< s.inputParameters.size) {
			var data = ConfigurationFactory.eINSTANCE.createData;
			data.parameter = s.inputParameters.get(i);
			data.value = new EncapsulatedValue;
			t.inputs.add(data);
		}
		for (i : 0 ..< s.outputParameters.size) {
			var data = ConfigurationFactory.eINSTANCE.createData;
			data.parameter = s.outputParameters.get(i);
			data.value = new EncapsulatedValue;
			t.outputs.add(data);
		}
	}
	
}
