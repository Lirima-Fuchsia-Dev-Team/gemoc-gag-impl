// automatically generated by Xtext
grammar fr.inria.gag.specification.xtext.Gag with org.eclipse.xtext.common.Terminals

//import "http://www.inria.fr/gag/specification" 
import "platform:/resource/fr.inria.gag.specification.model/model/specification.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GAG returns GAG:
	{GAG}
	'GAG'
	name=EString
	'{'
		('services' '{' services+=Service ( "," services+=Service)* '}' )?
	'}';






Service returns Service:
	isAxiom?='isAxiom'
	'Service'
	name=EString
	'{'
		'rules' '{' rules+=DecompositionRule ( "," rules+=DecompositionRule)* '}' 
		('inputParameters' '{' inputParameters+=Parameter ( "," inputParameters+=Parameter)* '}' )?
		('outputParameters' '{' outputParameters+=Parameter ( "," outputParameters+=Parameter)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

DecompositionRule returns DecompositionRule:
	{DecompositionRule}
	'DecompositionRule'
	name=EString
	'{'
		('subServices' '(' subServices+=[Service|EString] ( "," subServices+=[Service|EString])* ')' )?
		('guard' guard=Guard)?
		('semantic' semantic=SemanticRule)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Guard returns Guard:
	{Guard}
	'Guard'
	'{'
		('classPath' classPath=EString)?
	'}';

SemanticRule returns SemanticRule:
	{SemanticRule}
	'SemanticRule'
	;
