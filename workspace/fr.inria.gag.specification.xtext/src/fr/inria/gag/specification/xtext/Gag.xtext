// automatically generated by Xtext
grammar fr.inria.gag.specification.xtext.Gag with org.eclipse.xtext.common.Terminals

import "platform:/resource/fr.inria.gag.specification.model/model/specification.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GAG returns GAG:
	{GAG}
	'GAG'
	name=EString
	'{'
		( '{' services+=Service ( "," services+=Service)* '}' )?
	'}';










Expression returns Expression:
	IdExpresssion | FunctionExpression;

Service returns Service:
	(isAxiom?='isAxiom')?
	'Service'
	name=EString
	'{'
		
		( '(' inputParameters+=Parameter ( "," inputParameters+=Parameter)* ')' )?
		( '[' outputParameters+=Parameter ( "," outputParameters+=Parameter)* ']' )?
		':' '{' rules+=DecompositionRule ( "," rules+=DecompositionRule)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

DecompositionRule returns DecompositionRule:
	{DecompositionRule}
	
	name=EString
	':'
		('sub' ':' subServices+=[Service|EString] ( "," subServices+=[Service|EString])*  )?
		('guard' guard=Guard)?
		('sem' ':' semantic=SemanticRule)?
	 ;
	//'';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Guard returns Guard:
	'Guard'
	'{'
		'classPath' classPath=EString
		'libLocation' libLocation=EString
	'}';

SemanticRule returns SemanticRule:
	{SemanticRule}
	
	'{'
		('func' ':'  functionDeclaration+=FunctionDeclaration ( "," functionDeclaration+=FunctionDeclaration)*  )?
		('equations' ':'  equations+=Equation (  equations+=Equation)*  )?
	'}';

FunctionDeclaration returns FunctionDeclaration:
	//'FunctionDeclaration'
	name=EString
	'{'
		'classPath' classPath=EString
		'method' method=EString
		'libLocation' libLocation=EString
	'}';




Equation returns Equation:
	
		 leftpart=IdExpresssion
		'=' rightpart=Expression
	';';

IdExpresssion returns IdExpresssion:
	'IdExpresssion'
	'{'
		 serviceName=EString
		'.'  parameterName=EString
	'}';

FunctionExpression returns FunctionExpression:
	 function=[FunctionDeclaration|EString]
		 '(' (idExpresssions+=IdExpresssion ( "," idExpresssions+=IdExpresssion)* )? ')'
	;
