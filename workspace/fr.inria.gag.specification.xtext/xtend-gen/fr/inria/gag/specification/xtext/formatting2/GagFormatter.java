/**
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.formatting2;

import com.google.inject.Inject;
import fr.inria.gag.specification.model.specification.DecompositionRule;
import fr.inria.gag.specification.model.specification.GAG;
import fr.inria.gag.specification.model.specification.Parameter;
import fr.inria.gag.specification.model.specification.Service;
import fr.inria.gag.specification.xtext.services.GagGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GagFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GagGrammarAccess _gagGrammarAccess;
  
  protected void _format(final GAG gAG, @Extension final IFormattableDocument document) {
    EList<Service> _services = gAG.getServices();
    for (final Service service : _services) {
      document.<Service>format(service);
    }
  }
  
  protected void _format(final Service service, @Extension final IFormattableDocument document) {
    EList<DecompositionRule> _rules = service.getRules();
    for (final DecompositionRule decompositionRule : _rules) {
      document.<DecompositionRule>format(decompositionRule);
    }
    EList<Parameter> _inputParameters = service.getInputParameters();
    for (final Parameter parameter : _inputParameters) {
      document.<Parameter>format(parameter);
    }
    EList<Parameter> _outputParameters = service.getOutputParameters();
    for (final Parameter parameter_1 : _outputParameters) {
      document.<Parameter>format(parameter_1);
    }
  }
  
  public void format(final Object gAG, final IFormattableDocument document) {
    if (gAG instanceof XtextResource) {
      _format((XtextResource)gAG, document);
      return;
    } else if (gAG instanceof GAG) {
      _format((GAG)gAG, document);
      return;
    } else if (gAG instanceof Service) {
      _format((Service)gAG, document);
      return;
    } else if (gAG instanceof EObject) {
      _format((EObject)gAG, document);
      return;
    } else if (gAG == null) {
      _format((Void)null, document);
      return;
    } else if (gAG != null) {
      _format(gAG, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(gAG, document).toString());
    }
  }
}
