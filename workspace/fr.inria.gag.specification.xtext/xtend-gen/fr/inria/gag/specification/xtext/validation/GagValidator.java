/**
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.validation;

import com.google.common.base.Objects;
import fr.inria.gag.configuration.model.configuration.ConfigurationFactory;
import fr.inria.gag.configuration.model.configuration.Data;
import fr.inria.gag.configuration.model.configuration.PendingLocalFunctionComputation;
import fr.inria.gag.configuration.model.configuration.Task;
import fr.inria.gag.specification.model.specification.DecompositionRule;
import fr.inria.gag.specification.model.specification.Equation;
import fr.inria.gag.specification.model.specification.Expression;
import fr.inria.gag.specification.model.specification.FunctionExpression;
import fr.inria.gag.specification.model.specification.IdExpression;
import fr.inria.gag.specification.model.specification.LeftPartExpression;
import fr.inria.gag.specification.model.specification.LocalData;
import fr.inria.gag.specification.model.specification.Service;
import fr.inria.gag.specification.model.specification.SpecificationPackage;
import fr.inria.gag.specification.xtext.validation.AbstractGagValidator;
import fr.inria.gag.specification.xtext.validation.EncapsulatedValue;
import fr.inria.gag.specification.xtext.validation.ValidatorTool;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class GagValidator extends AbstractGagValidator {
  /**
   * @Check
   * def checkInterface(GAG gag) {
   * var services = gag.services;
   * var tk = new ValidatorTool();
   * var inter= new ServiceInterface();
   * System.out.println("interface at the beginning :"+inter.toString);
   * System.out.println("services sizes :"+services.size);
   * for( i:0..<services.size){
   * var service=services.get(i);
   * System.out.println("treating service :"+i);
   * for(k:0 ..<service.rules.size){
   * var rule=service.rules.get(k);
   * inter=tk.getRuleInterface(rule);
   * System.out.println("interface :"+inter.toString);
   * //warning("interface :"+tk.getRuleInterface(rule).toString,SpecificationPackage.Literals.GAG__SERVICES);
   * }
   * }
   * System.out.println("interface at the end :"+inter.toString);
   * 
   * //error("interface :"+tk.getRuleInterface(rule).toString,SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
   * 
   * }
   */
  @Check
  public void checkInterface(final DecompositionRule rule) {
    ValidatorTool tk = new ValidatorTool();
    String _string = tk.getRuleInterface(rule).toString();
    String _plus = ("interface :" + _string);
    System.out.println(_plus);
    String _string_1 = tk.getRuleInterface(rule).toString();
    String _plus_1 = ("interface :" + _string_1);
    this.warning(_plus_1, SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
  }
  
  @Check
  public void checkVariableDefinition(final DecompositionRule rule) {
    EObject _eContainer = rule.eContainer();
    Service service = ((Service) _eContainer);
    Task t = ConfigurationFactory.eINSTANCE.createTask();
    this.initTask(t, service);
    int _size = rule.getSubServices().size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        final Service element = rule.getSubServices().get((i).intValue());
        Task st = ConfigurationFactory.eINSTANCE.createTask();
        this.initTask(st, element);
        t.getSubTasks().add(st);
      }
    }
    ArrayList<Task> context = new ArrayList<Task>();
    Hashtable<String, Data> localVariables = new Hashtable<String, Data>();
    ArrayList<PendingLocalFunctionComputation> localFunctions = new ArrayList<PendingLocalFunctionComputation>();
    Hashtable<String, Data> assignments = new Hashtable<String, Data>();
    context.add(t);
    context.addAll(t.getSubTasks());
    boolean continue_ = true;
    int _size_1 = rule.getSemantic().getEquations().size();
    ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_1, true);
    for (final Integer i_1 : _doubleDotLessThan_1) {
      if (continue_) {
        Equation eq = rule.getSemantic().getEquations().get((i_1).intValue());
        Data data1 = ((Data) null);
        LeftPartExpression _leftpart = eq.getLeftpart();
        if ((_leftpart instanceof IdExpression)) {
          LeftPartExpression _leftpart_1 = eq.getLeftpart();
          IdExpression eql = ((IdExpression) _leftpart_1);
          String _serviceName = eql.getServiceName();
          String _parameterName = eql.getParameterName();
          String[] ref1 = new String[] { _serviceName, _parameterName };
          data1 = this.findReference(ref1, context);
          if ((data1 == null)) {
            continue_ = false;
            String _serviceName_1 = eql.getServiceName();
            String _plus = ("the parameter " + _serviceName_1);
            String _plus_1 = (_plus + ".");
            String _parameterName_1 = eql.getParameterName();
            String _plus_2 = (_plus_1 + _parameterName_1);
            String _plus_3 = (_plus_2 + " doesn\'t exist");
            this.error(_plus_3, 
              SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
          } else {
            String _serviceName_2 = eql.getServiceName();
            String _plus_4 = (_serviceName_2 + ".");
            String _parameterName_2 = eql.getParameterName();
            String name = (_plus_4 + _parameterName_2).trim();
            Data _get = assignments.get(name);
            boolean _tripleEquals = (_get == null);
            if (_tripleEquals) {
              assignments.put(name, data1);
            } else {
              continue_ = false;
              this.error((("the parameter " + name) + " is defined twice"), 
                SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
            }
          }
        } else {
          LeftPartExpression _leftpart_2 = eq.getLeftpart();
          LocalData eql_1 = ((LocalData) _leftpart_2);
          data1 = localVariables.get(eql_1.getName().trim());
          boolean _equals = Objects.equal(data1, null);
          if (_equals) {
            data1 = ConfigurationFactory.eINSTANCE.createData();
            EncapsulatedValue _encapsulatedValue = new EncapsulatedValue();
            data1.setValue(_encapsulatedValue);
            localVariables.put(eql_1.getName().trim(), data1);
          } else {
            continue_ = false;
            String _trim = eql_1.getName().trim();
            String _plus_5 = ("the local variable " + _trim);
            String _plus_6 = (_plus_5 + " is defined twice");
            this.error(_plus_6, 
              SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
          }
        }
        if (continue_) {
          Expression _rightpart = eq.getRightpart();
          if ((_rightpart instanceof LeftPartExpression)) {
            Data data2 = ((Data) null);
            Expression _rightpart_1 = eq.getRightpart();
            if ((_rightpart_1 instanceof IdExpression)) {
              Expression _rightpart_2 = eq.getRightpart();
              final IdExpression rightPartIdExpression = ((IdExpression) _rightpart_2);
              String _serviceName_3 = rightPartIdExpression.getServiceName();
              String _parameterName_3 = rightPartIdExpression.getParameterName();
              final String[] ref2 = new String[] { _serviceName_3, _parameterName_3 };
              data2 = this.findReference(ref2, context);
              boolean _equals_1 = Objects.equal(data2, null);
              if (_equals_1) {
                continue_ = false;
                String _get_1 = ref2[0];
                String _plus_7 = ("the parameter " + _get_1);
                String _plus_8 = (_plus_7 + ".");
                String _get_2 = ref2[1];
                String _plus_9 = (_plus_8 + _get_2);
                String _plus_10 = (_plus_9 + " doesn\'t exist");
                this.error(_plus_10, 
                  SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
              }
            } else {
              Expression _rightpart_3 = eq.getRightpart();
              LocalData eqr = ((LocalData) _rightpart_3);
              data2 = localVariables.get(eqr.getName().trim());
              boolean _equals_2 = Objects.equal(data2, null);
              if (_equals_2) {
                data2 = ConfigurationFactory.eINSTANCE.createData();
                EncapsulatedValue _encapsulatedValue_1 = new EncapsulatedValue();
                data2.setValue(_encapsulatedValue_1);
                localVariables.put(eqr.getName().trim(), data2);
              }
            }
            Object _value = data1.getValue();
            EncapsulatedValue ecData1 = ((EncapsulatedValue) _value);
            Object _value_1 = data2.getValue();
            ecData1.addReference(((EncapsulatedValue) _value_1));
          } else {
            Expression _rightpart_4 = eq.getRightpart();
            FunctionExpression func = ((FunctionExpression) _rightpart_4);
            Object _value_2 = data1.getValue();
            EncapsulatedValue ecData1_1 = ((EncapsulatedValue) _value_2);
            PendingLocalFunctionComputation runningFunction = ConfigurationFactory.eINSTANCE.createPendingLocalFunctionComputation();
            runningFunction.setDataToCompute(data1);
            runningFunction.setFunctiondeclaration(func.getFunction());
            int _size_2 = func.getExpressions().size();
            ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _size_2, true);
            for (final Integer k : _doubleDotLessThan_2) {
              {
                LeftPartExpression elId = func.getExpressions().get((k).intValue());
                Data data = ((Data) null);
                if ((elId instanceof IdExpression)) {
                  String _serviceName_4 = ((IdExpression) elId).getServiceName();
                  String _parameterName_4 = ((IdExpression) elId).getParameterName();
                  final String[] ref = new String[] { _serviceName_4, _parameterName_4 };
                  data = this.findReference(ref, context);
                  boolean _equals_3 = Objects.equal(data, null);
                  if (_equals_3) {
                    continue_ = false;
                    String _get_3 = ref[0];
                    String _plus_11 = ("the parameter " + _get_3);
                    String _plus_12 = (_plus_11 + ".");
                    String _get_4 = ref[1];
                    String _plus_13 = (_plus_12 + _get_4);
                    String _plus_14 = (_plus_13 + " doesn\'t exist");
                    this.error(_plus_14, 
                      SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
                  }
                } else {
                  data = localVariables.get(((LocalData) elId).getName().trim());
                  boolean _equals_4 = Objects.equal(data, null);
                  if (_equals_4) {
                    data = ConfigurationFactory.eINSTANCE.createData();
                    EncapsulatedValue _encapsulatedValue_2 = new EncapsulatedValue();
                    data.setValue(_encapsulatedValue_2);
                    localVariables.put(((LocalData) elId).getName().trim(), data);
                  }
                }
                runningFunction.getActualParameters().add(data);
              }
            }
            localFunctions.add(runningFunction);
          }
        }
      }
    }
    Set<String> keysLocalVariables = localVariables.keySet();
    int _size_3 = keysLocalVariables.size();
    ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _size_3, true);
    for (final Integer i_2 : _doubleDotLessThan_3) {
      {
        final Set<String> _converted_keysLocalVariables = (Set<String>)keysLocalVariables;
        Data locdat = localVariables.get(((Object[])Conversions.unwrapArray(_converted_keysLocalVariables, Object.class))[(i_2).intValue()]);
        boolean _isALocalDataDefined = this.isALocalDataDefined(locdat, localFunctions);
        boolean _not = (!_isALocalDataDefined);
        if (_not) {
          final Set<String> _converted_keysLocalVariables_1 = (Set<String>)keysLocalVariables;
          String _get_3 = ((String[])Conversions.unwrapArray(_converted_keysLocalVariables_1, String.class))[(i_2).intValue()];
          String _plus_11 = ("the local variable " + _get_3);
          String _plus_12 = (_plus_11 + " is not defined");
          this.error(_plus_12, 
            SpecificationPackage.Literals.DECOMPOSITION_RULE__SEMANTIC);
        }
      }
    }
  }
  
  public boolean isALocalDataDefined(final Data local, final ArrayList<PendingLocalFunctionComputation> functions) {
    Object _value = local.getValue();
    EncapsulatedValue ecV = ((EncapsulatedValue) _value);
    EncapsulatedValue _reference = ecV.getReference();
    boolean _notEquals = (!Objects.equal(_reference, null));
    if (_notEquals) {
      return true;
    }
    int _size = functions.size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      Data _dataToCompute = functions.get((i).intValue()).getDataToCompute();
      boolean _equals = Objects.equal(_dataToCompute, local);
      if (_equals) {
        return true;
      }
    }
    return false;
  }
  
  public void initTask(final Task t, final Service s) {
    t.setService(s);
    t.setIsOpen(true);
    int _size = s.getInputParameters().size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        Data data = ConfigurationFactory.eINSTANCE.createData();
        data.setParameter(s.getInputParameters().get((i).intValue()));
        EncapsulatedValue _encapsulatedValue = new EncapsulatedValue();
        data.setValue(_encapsulatedValue);
        t.getInputs().add(data);
      }
    }
    int _size_1 = s.getOutputParameters().size();
    ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_1, true);
    for (final Integer i_1 : _doubleDotLessThan_1) {
      {
        Data data = ConfigurationFactory.eINSTANCE.createData();
        data.setParameter(s.getOutputParameters().get((i_1).intValue()));
        EncapsulatedValue _encapsulatedValue = new EncapsulatedValue();
        data.setValue(_encapsulatedValue);
        t.getOutputs().add(data);
      }
    }
  }
  
  public Data findReference(final String[] ref, final ArrayList<Task> tasks) {
    Data objectRef = ((Data) null);
    String serviceName = ref[0].toString().trim();
    String serviceParameter = ref[1].toString().trim();
    int _size = tasks.size();
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        Task element = tasks.get((i).intValue());
        boolean _equals = element.getService().getName().equals(serviceName);
        if (_equals) {
          int _size_1 = element.getInputs().size();
          ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_1, true);
          for (final Integer j : _doubleDotLessThan_1) {
            boolean _equals_1 = element.getInputs().get((j).intValue()).getParameter().getName().equals(serviceParameter);
            if (_equals_1) {
              objectRef = element.getInputs().get((j).intValue());
            }
          }
          int _size_2 = element.getOutputs().size();
          ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _size_2, true);
          for (final Integer j_1 : _doubleDotLessThan_2) {
            boolean _equals_2 = element.getOutputs().get((j_1).intValue()).getParameter().getName().equals(serviceParameter);
            if (_equals_2) {
              objectRef = element.getOutputs().get((j_1).intValue());
            }
          }
        }
      }
    }
    return objectRef;
  }
}
