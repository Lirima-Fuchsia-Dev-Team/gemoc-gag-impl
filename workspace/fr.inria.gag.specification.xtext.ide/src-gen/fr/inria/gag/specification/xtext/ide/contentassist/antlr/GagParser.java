/*
 * generated by Xtext 2.14.0
 */
package fr.inria.gag.specification.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.inria.gag.specification.xtext.ide.contentassist.antlr.internal.InternalGagParser;
import fr.inria.gag.specification.xtext.services.GagGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GagParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GagGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GagGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getGAGAccess().getGroup(), "rule__GAG__Group__0");
			builder.put(grammarAccess.getGAGAccess().getGroup_4(), "rule__GAG__Group_4__0");
			builder.put(grammarAccess.getGAGAccess().getGroup_4_3(), "rule__GAG__Group_4_3__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_7(), "rule__Service__Group_7__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_9(), "rule__Service__Group_9__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_9_3(), "rule__Service__Group_9_3__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_10(), "rule__Service__Group_10__0");
			builder.put(grammarAccess.getServiceAccess().getGroup_10_3(), "rule__Service__Group_10_3__0");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGroup(), "rule__DecompositionRule__Group__0");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGroup_4(), "rule__DecompositionRule__Group_4__0");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGroup_4_3(), "rule__DecompositionRule__Group_4_3__0");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGroup_5(), "rule__DecompositionRule__Group_5__0");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGroup_6(), "rule__DecompositionRule__Group_6__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
			builder.put(grammarAccess.getGuardAccess().getGroup_3(), "rule__Guard__Group_3__0");
			builder.put(grammarAccess.getSemanticRuleAccess().getGroup(), "rule__SemanticRule__Group__0");
			builder.put(grammarAccess.getGAGAccess().getNameAssignment_2(), "rule__GAG__NameAssignment_2");
			builder.put(grammarAccess.getGAGAccess().getServicesAssignment_4_2(), "rule__GAG__ServicesAssignment_4_2");
			builder.put(grammarAccess.getGAGAccess().getServicesAssignment_4_3_1(), "rule__GAG__ServicesAssignment_4_3_1");
			builder.put(grammarAccess.getServiceAccess().getIsAxiomAssignment_0(), "rule__Service__IsAxiomAssignment_0");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_2(), "rule__Service__NameAssignment_2");
			builder.put(grammarAccess.getServiceAccess().getRulesAssignment_6(), "rule__Service__RulesAssignment_6");
			builder.put(grammarAccess.getServiceAccess().getRulesAssignment_7_1(), "rule__Service__RulesAssignment_7_1");
			builder.put(grammarAccess.getServiceAccess().getInputParametersAssignment_9_2(), "rule__Service__InputParametersAssignment_9_2");
			builder.put(grammarAccess.getServiceAccess().getInputParametersAssignment_9_3_1(), "rule__Service__InputParametersAssignment_9_3_1");
			builder.put(grammarAccess.getServiceAccess().getOutputParametersAssignment_10_2(), "rule__Service__OutputParametersAssignment_10_2");
			builder.put(grammarAccess.getServiceAccess().getOutputParametersAssignment_10_3_1(), "rule__Service__OutputParametersAssignment_10_3_1");
			builder.put(grammarAccess.getDecompositionRuleAccess().getNameAssignment_2(), "rule__DecompositionRule__NameAssignment_2");
			builder.put(grammarAccess.getDecompositionRuleAccess().getSubServicesAssignment_4_2(), "rule__DecompositionRule__SubServicesAssignment_4_2");
			builder.put(grammarAccess.getDecompositionRuleAccess().getSubServicesAssignment_4_3_1(), "rule__DecompositionRule__SubServicesAssignment_4_3_1");
			builder.put(grammarAccess.getDecompositionRuleAccess().getGuardAssignment_5_1(), "rule__DecompositionRule__GuardAssignment_5_1");
			builder.put(grammarAccess.getDecompositionRuleAccess().getSemanticAssignment_6_1(), "rule__DecompositionRule__SemanticAssignment_6_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
			builder.put(grammarAccess.getGuardAccess().getClassPathAssignment_3_1(), "rule__Guard__ClassPathAssignment_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GagGrammarAccess grammarAccess;

	@Override
	protected InternalGagParser createParser() {
		InternalGagParser result = new InternalGagParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GagGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GagGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
