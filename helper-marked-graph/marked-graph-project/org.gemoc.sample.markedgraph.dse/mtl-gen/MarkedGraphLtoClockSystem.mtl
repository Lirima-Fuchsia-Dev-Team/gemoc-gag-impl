[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.example.org/markedgraph') ]

[template public generate(aMarkedGraph : MarkedGraph)]
[comment @main/]
[file (aMarkedGraph.name+'_withMoC-.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aMarkedGraph.name/]_withMoC-'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : markedgraph::MarkedGraph| aMarkedGraph.eAllContents(markedgraph::MarkedGraph))]
"clocks for MarkedGraph [element.name/]" 
system addClocks: #(initIt[element.name/]).

"internal clocks for markedgraph::MarkedGraph [element.name/]" 
	
[/for]
[for (element : markedgraph::Transition| aMarkedGraph.eAllContents(markedgraph::Transition))]
"clocks for Transition [element.name/]" 
system addClocks: #(fireIt[element.name/]).

[/for]
[for (element : markedgraph::Place| aMarkedGraph.eAllContents(markedgraph::Place))]
"clocks for Place [element.name/]" 
"internal clocks for markedgraph::Place [element.name/]" 
	system addInternalClocks: #(outputDelayed[element.name/]).

[/for]

[for (element : markedgraph::MarkedGraph| aMarkedGraph.eAllContents(markedgraph::MarkedGraph))]
"expressions used by  MarkedGraph [element.name/]" 

	[if ( ->size()>1) ]
	system allOneTickAndNoMore: #(initIt[element.name/]) named: #firstInit[element.name/]. 
	[/if]
 

	[if ( ) ]
	system allUnion: #() named: #allFire[element.name/]. 
	[/if]
 

	[if ( ->size()>1) ]
	system allOneTickAndNoMore: #() named: #firstOfAllFire[element.name/]. 
	[/if]
 

	[if ( ->size()>1) ]
	system allOneTickAndNoMore: #(initIt[element.name/]) named: #firstInit2[element.name/]. 
	[/if]
 
"relations for MarkedGraph [element.name/]" 
	"initFirst in MarkedGraph [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(firstInit[element.name/]  firstOfAllFire[element.name/])  constants:{-1} .
		[/if]
	"onlyOneInit in MarkedGraph [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(initIt[element.name/]  firstInit2[element.name/]) .
		[/if]
[/for]
[for (element : markedgraph::Transition| aMarkedGraph.eAllContents(markedgraph::Transition))]
"relations for Transition [element.name/]" 
[/for]
[for (element : markedgraph::Place| aMarkedGraph.eAllContents(markedgraph::Place))]
"expressions used by  Place [element.name/]" 

	[if ( true) ]
	system allDelayFor: #(fireIt[element.output.name/] fireIt[element.output.name/]) named: #outputDelayed[element.name/]. 
	[/if]
 
"relations for Place [element.name/]" 
	"tokenCountIsNull in Place [element.name/]"
		[if ( ( self.tokenCount = 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(fireIt[element.input.name/]  fireIt[element.output.name/])  constants:{-1} .
		[/if]
	"tokenCountIsNotNullDelayRequired in Place [element.name/]"
		[if ( ( self.tokenCount > 0) ) ]
	system library: #Kernel relation: #Precedes clocks: #(fireIt[element.input.name/]  outputDelayed[element.name/])  constants:{-1} .
		[/if]
[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]


[/template]



